File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\TextFieldFactory.java
```
package com.example;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;

import org.kordamp.ikonli.javafx.FontIcon;
public class TextFieldFactory {
    // make method to create text field
    public static TextField createTextField(String text) {
        TextField textField = new TextField();
        textField.setPromptText(text);
        textField.getStyleClass().add("text-field");
        return textField;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Sidebar.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import org.kordamp.ikonli.javafx.FontIcon;

public class Sidebar {
    private VBox sidebar;
    private Button btnCars;
    private Button btnCustomers;
    private Button btnEmployees;
    private Button btnOrders;
    private Button btnPayments;
    private Button btnServices;
    private Button btnReports;
    private Button btnLogout;

    public Sidebar(String username) {
        sidebar = new VBox(10);
        sidebar.getStyleClass().add("sidebar"); // Add the CSS class
        sidebar.setPadding(new Insets(10));

        // User label
        FontIcon userIcon = new FontIcon("fas-user");
        userIcon.setIconSize(20);
        userIcon.setIconColor(javafx.scene.paint.Color.WHITE);
        Label userLabel = new Label(" " + username);
        userLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: white;");
        HBox userBox = new HBox(5, userIcon, userLabel);
        userBox.setAlignment(Pos.CENTER_LEFT);

        // Buttons
        btnCars = ButtonFactory.createSidebarButton(" Cars", "fas-car");
        btnCustomers = ButtonFactory.createSidebarButton("Customers", "fas-users");
        btnEmployees = ButtonFactory.createSidebarButton("  Employees", "fas-user-tie");
        btnOrders = ButtonFactory.createSidebarButton("   Orders", "fas-file-invoice-dollar");
        btnPayments = ButtonFactory.createSidebarButton(" Payments", "fas-hand-holding-usd");
        btnServices = ButtonFactory.createSidebarButton(" Services", "fas-tools");
        btnReports = ButtonFactory.createSidebarButton(" Reports", "fas-chart-line");
        btnLogout = ButtonFactory.createSidebarButton(" Logout", "fas-sign-out-alt");

        sidebar.getChildren().addAll(userBox, btnCars, btnCustomers, btnEmployees, btnOrders, btnPayments, btnServices,
                btnReports, btnLogout);
    }

    // Getter methods for buttons
    public VBox getSidebar() {
        return sidebar;
    }

    public Button getBtnCars() {
        return btnCars;
    }

    public Button getBtnCustomers() {
        return btnCustomers;
    }

    public Button getBtnEmployees() {
        return btnEmployees;
    }

    public Button getBtnOrders() {
        return btnOrders;
    }

    public Button getBtnPayments() {
        return btnPayments;
    }

    public Button getBtnServices() {
        return btnServices;
    }

    public Button getBtnReports() {
        return btnReports;
    }

    public Button getBtnLogout() {
        return btnLogout;
    }

  
    
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ServicesSection.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.util.Callback;
import org.kordamp.ikonli.javafx.FontIcon;

import java.sql.*;
import java.time.LocalDate;
import java.util.Optional;

public class ServicesSection {
    private TableView<Service> servicesTableView;
    private VBox view;
    private ServiceEditForm serviceEditForm;
    private ServiceAddForm serviceAddForm;
    private ObservableList<Service> serviceData;

    public ServicesSection() {
        // Initialize forms
        serviceEditForm = new ServiceEditForm(this);
        serviceAddForm = new ServiceAddForm(this);

        // Create the TableView
        servicesTableView = new TableView<>();
        servicesTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        servicesTableView.setPrefSize(750, 400);

        // Define columns
        TableColumn<Service, Integer> colServiceID = new TableColumn<>("Service ID");
        colServiceID.setCellValueFactory(new PropertyValueFactory<>("serviceID"));

        TableColumn<Service, Integer> colCarID = new TableColumn<>("Car ID");
        colCarID.setCellValueFactory(new PropertyValueFactory<>("carID"));

        TableColumn<Service, Integer> colCustomerID = new TableColumn<>("Customer ID");
        colCustomerID.setCellValueFactory(new PropertyValueFactory<>("customerID"));

        TableColumn<Service, LocalDate> colServiceDate = new TableColumn<>("Service Date");
        colServiceDate.setCellValueFactory(new PropertyValueFactory<>("serviceDate"));

        TableColumn<Service, String> colServiceDescription = new TableColumn<>("Service Description");
        colServiceDescription.setCellValueFactory(new PropertyValueFactory<>("serviceDescription"));

        TableColumn<Service, Double> colCost = new TableColumn<>("Cost");
        colCost.setCellValueFactory(new PropertyValueFactory<>("cost"));

        // Add Edit Icon Column
        TableColumn<Service, Void> colEdit = createEditColumn();

       

        servicesTableView.getColumns().addAll(
                colServiceID, colCarID, colCustomerID,
                colServiceDate, colServiceDescription, colCost, colEdit );

        // Load data from the database
        serviceData = fetchServiceData();
        FilteredList<Service> filteredData = new FilteredList<>(serviceData, p -> true);
        servicesTableView.setItems(filteredData);

        // Create search fields
        TextField txtServiceID = new TextField();
        txtServiceID.setPromptText("Service ID");

        TextField txtCarID = new TextField();
        txtCarID.setPromptText("Car ID");

        TextField txtCustomerID = new TextField();
        txtCustomerID.setPromptText("Customer ID");

        TextField txtServiceDate = new TextField();
        txtServiceDate.setPromptText("Service Date");

        TextField txtServiceDescription = new TextField();
        txtServiceDescription.setPromptText("Service Description");

        TextField txtCost = new TextField();
        txtCost.setPromptText("Cost");
        
        // Add filtering logic
        txtServiceID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                service -> filterServices(service, txtServiceID, txtCarID, txtCustomerID, txtServiceDate, txtServiceDescription, txtCost)));

        txtCarID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                service -> filterServices(service, txtServiceID, txtCarID, txtCustomerID, txtServiceDate, txtServiceDescription, txtCost)));

        txtCustomerID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                service -> filterServices(service, txtServiceID, txtCarID, txtCustomerID, txtServiceDate, txtServiceDescription, txtCost)));

        txtServiceDate.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                service -> filterServices(service, txtServiceID, txtCarID, txtCustomerID, txtServiceDate, txtServiceDescription, txtCost)));

        txtServiceDescription.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                service -> filterServices(service, txtServiceID, txtCarID, txtCustomerID, txtServiceDate, txtServiceDescription, txtCost)));

        txtCost.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                service -> filterServices(service, txtServiceID, txtCarID, txtCustomerID, txtServiceDate, txtServiceDescription, txtCost)));

        // Reset button to clear all text fields
        Button btnReset = ButtonFactory.createActionButton("Reset");
        btnReset.setOnAction(e -> {
            txtServiceID.clear();
            txtCarID.clear();
            txtCustomerID.clear();
            txtServiceDate.clear();
            txtServiceDescription.clear();
            txtCost.clear();
        });

      

        // Layout for search fields with label and reset button
        Label lblSearch = new Label("Search:");
        HBox searchFields = new HBox(15, lblSearch, txtServiceID, txtCarID, txtCustomerID, txtServiceDate, txtServiceDescription, txtCost, btnReset);
        searchFields.setAlignment(Pos.CENTER_LEFT);
        searchFields.setPadding(new Insets(5));

        // Add Buttons for Adding Services
        Button btnAddService = ButtonFactory.createActionButton("Add Service");
        btnAddService.setOnAction(e -> {
            hideEditForm(); // Hide edit form if visible
            showAddForm();
        });

        HBox hboxButtons = new HBox(10, btnAddService);
        hboxButtons.setAlignment(Pos.CENTER);
        hboxButtons.setPadding(new Insets(10));

        // Add everything to the main view
        view = new VBox(10);
        view.setPadding(new Insets(10));
        view.getChildren().addAll(lblSearch, searchFields, hboxButtons, servicesTableView);
    }

    private boolean filterServices(Service service, TextField txtServiceID, TextField txtCarID, TextField txtCustomerID,
                                   TextField txtServiceDate, TextField txtServiceDescription, TextField txtCost) {
        boolean matchesServiceID = txtServiceID.getText().isEmpty()
                || String.valueOf(service.getServiceID()).equals(txtServiceID.getText());
        boolean matchesCarID = txtCarID.getText().isEmpty()
                || String.valueOf(service.getCarID()).equals(txtCarID.getText());
        boolean matchesCustomerID = txtCustomerID.getText().isEmpty()
                || String.valueOf(service.getCustomerID()).equals(txtCustomerID.getText());
        boolean matchesServiceDate = txtServiceDate.getText().isEmpty()
                || service.getServiceDate().toString().contains(txtServiceDate.getText());
        boolean matchesServiceDescription = txtServiceDescription.getText().isEmpty()
                || service.getServiceDescription().toLowerCase().contains(txtServiceDescription.getText().toLowerCase());
        boolean matchesCost = txtCost.getText().isEmpty()
                || String.valueOf(service.getCost()).contains(txtCost.getText());

        return matchesServiceID && matchesCarID && matchesCustomerID && matchesServiceDate && matchesServiceDescription && matchesCost;
    }

    private TableColumn<Service, Void> createEditColumn() {
        TableColumn<Service, Void> colEdit = new TableColumn<>("Edit");
        colEdit.setCellFactory(param -> new TableCell<Service, Void>() {
            private final Button editButton = ButtonFactory.createEditButton();

            {
                FontIcon editIcon = new FontIcon("fas-edit");
                editIcon.setIconSize(16);
                editButton.setGraphic(editIcon);
                editButton.setOnAction(event -> {
                    Service service = getTableView().getItems().get(getIndex());
                    hideAddForm(); // Hide the Add Form when Edit is clicked
                    showEditForm(service);
                });
            }

            @Override
            public void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editButton);
                }
                setAlignment(Pos.CENTER);
            }
        });
        return colEdit;
    }

 

    private ObservableList<Service> fetchServiceData() {
        ObservableList<Service> serviceList = FXCollections.observableArrayList();
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM services")) {

            while (rs.next()) {
                serviceList.add(new Service(
                        rs.getInt("ServiceID"),
                        rs.getInt("CarID"),
                        rs.getInt("CustomerID"),
                        rs.getDate("ServiceDate").toLocalDate(),
                        rs.getString("ServiceDescription"),
                        rs.getDouble("Cost")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return serviceList;
    }

    public void refreshData() {
        serviceData = fetchServiceData();
        servicesTableView.setItems(serviceData);
    }
    public void reloadScene() {
        // Get the parent layout (CarShopGUI's main content)
        VBox parent = (VBox) view.getParent();
        if (parent != null) {
            ServicesSection refreshedServicesSection = new ServicesSection();
            parent.getChildren().setAll(refreshedServicesSection.getView());
        }
    }
    public void hideEditForm() {
        view.getChildren().remove(serviceEditForm.getForm());
    }

    public void hideAddForm() {
        view.getChildren().remove(serviceAddForm.getForm());
    }

    public VBox getView() {
        return view;
    }

    private void showEditForm(Service service) {
        serviceEditForm.showEditForm(service);
        if (!view.getChildren().contains(serviceEditForm.getForm())) {
            view.getChildren().add(serviceEditForm.getForm());
        }
    }

    private void showAddForm() {
        serviceAddForm.showAddForm();
        if (!view.getChildren().contains(serviceAddForm.getForm())) {
            view.getChildren().add(serviceAddForm.getForm());
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ServiceEditForm.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class ServiceEditForm {
    private GridPane form;
    private ComboBox<Integer> cbCarID;
    private ComboBox<Integer> cbCustomerID;
    private DatePicker dpServiceDate;
    private TextField txtServiceDescription;
    private TextField txtCost;
    private Service currentService;
    private ServicesSection servicesSection;
    private Label messageLabel; // Label for displaying validation messages

    public ServiceEditForm(ServicesSection servicesSection) {
        this.servicesSection = servicesSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Load data for ComboBoxes
        cbCarID = new ComboBox<>();
        cbCustomerID = new ComboBox<>();
        loadCarIDs();
        loadCustomerIDs();

        dpServiceDate = new DatePicker();
        txtServiceDescription = new TextField();
        txtCost = new TextField();
        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");

        addInputConstraints();

        // Layout setup
        form.add(new Label("Car ID:"), 0, 0);
        form.add(cbCarID, 1, 0);
        form.add(new Label("Customer ID:"), 0, 1);
        form.add(cbCustomerID, 1, 1);
        form.add(new Label("Service Date:"), 0, 2);
        form.add(dpServiceDate, 1, 2);
        form.add(new Label("Service Description:"), 0, 3);
        form.add(txtServiceDescription, 1, 3);
        form.add(new Label("Cost:"), 0, 4);
        form.add(txtCost, 1, 4);
        form.add(messageLabel, 1, 5);

        // Buttons
        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveService());
        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> servicesSection.hideEditForm());
        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);
        form.add(hboxButtons, 1, 6);
    }

    private void addInputConstraints() {
        // Ensure cost is a valid decimal number
        txtCost.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtCost.setText(oldValue);
                messageLabel.setText("Cost must be a valid number.");
            } else {
                messageLabel.setText("");
            }
        });

        // Ensure the service date is not in the future
        dpServiceDate.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null && newValue.isAfter(LocalDate.now())) {
                dpServiceDate.setValue(oldValue);
                messageLabel.setText("Service Date must not be in the future.");
            } else {
                messageLabel.setText("");
            }
        });

        // Ensure description contains only letters and spaces
        txtServiceDescription.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z\\s]*")) {
                txtServiceDescription.setText(oldValue);
                messageLabel.setText("Service Description must contain only letters .");
            } else {
                messageLabel.setText("");
            }
        });
    }

    private void loadCarIDs() {
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT CarID FROM Cars ORDER BY CarID")) {
            List<Integer> carIDs = new ArrayList<>();
            while (rs.next()) {
                carIDs.add(rs.getInt("CarID"));
            }
            cbCarID.setItems(FXCollections.observableArrayList(carIDs));
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadCustomerIDs() {
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT CustomerID FROM Customers ORDER BY CustomerID")) {
            List<Integer> customerIDs = new ArrayList<>();
            while (rs.next()) {
                customerIDs.add(rs.getInt("CustomerID"));
            }
            cbCustomerID.setItems(FXCollections.observableArrayList(customerIDs));
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void showEditForm(Service service) {
        currentService = service;
        cbCarID.setValue(service.getCarID());
        cbCustomerID.setValue(service.getCustomerID());
        dpServiceDate.setValue(service.getServiceDate());
        txtServiceDescription.setText(service.getServiceDescription());
        txtCost.setText(String.format("%.2f", service.getCost()));
    }

    private void saveService() {
        if (cbCarID.getValue() == null || cbCustomerID.getValue() == null ||
            dpServiceDate.getValue() == null || txtServiceDescription.getText().isEmpty() ||
            txtCost.getText().isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }

        try {
            String sql = "UPDATE Services SET CarID = ?, CustomerID = ?, ServiceDate = ?, ServiceDescription = ?, Cost = ? WHERE ServiceID = ?";
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, cbCarID.getValue());
                pstmt.setInt(2, cbCustomerID.getValue());
                pstmt.setDate(3, Date.valueOf(dpServiceDate.getValue()));
                pstmt.setString(4, txtServiceDescription.getText());
                pstmt.setDouble(5, Double.parseDouble(txtCost.getText()));
                pstmt.setInt(6, currentService.getServiceID());

                int affectedRows = pstmt.executeUpdate();
                if (affectedRows > 0) {
                    messageLabel.setText("Service updated successfully.");
                    messageLabel.setStyle("-fx-text-fill: green;");
                } else {
                    messageLabel.setText("No changes were made.");
                    messageLabel.setStyle("-fx-text-fill: orange;");
                }
                clearFields();
                servicesSection.reloadScene();
            }
        } catch (SQLException e) {
            messageLabel.setText("Database error: " + e.getMessage());
            messageLabel.setStyle("-fx-text-fill: red;");
            e.printStackTrace();
        } catch (NumberFormatException e) {
            messageLabel.setText("Invalid number format.");
            messageLabel.setStyle("-fx-text-fill: red;");
        }
    }
    private void clearFields() {
        cbCarID.getSelectionModel().clearSelection();
        cbCustomerID.getSelectionModel().clearSelection();
        dpServiceDate.setValue(LocalDate.now());
        txtServiceDescription.clear();
        txtCost.clear();
        messageLabel.setText("");
    }

    public GridPane getForm() {
        return form;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ServiceAddForm.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class ServiceAddForm {
    private GridPane form;
    private ComboBox<Integer> cbCarID;
    private ComboBox<Integer> cbCustomerID;
    private DatePicker dpServiceDate;
    private TextField txtServiceDescription;
    private TextField txtCost;
    private ServicesSection servicesSection;
    private Label messageLabel; // Label for displaying validation messages

    public ServiceAddForm(ServicesSection servicesSection) {
        this.servicesSection = servicesSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Initialize controls
        cbCarID = new ComboBox<>();
        cbCustomerID = new ComboBox<>();
        loadCarIDs();  // Load car IDs into ComboBox
        loadCustomerIDs();  // Load customer IDs into ComboBox

        dpServiceDate = new DatePicker(LocalDate.now());
        txtServiceDescription = new TextField();
        txtCost = new TextField();

        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");

        addInputConstraints();

        // Layout setup
        form.add(new Label("Car ID:"), 0, 0);
        form.add(cbCarID, 1, 0);
        form.add(new Label("Customer ID:"), 0, 1);
        form.add(cbCustomerID, 1, 1);
        form.add(new Label("Service Date:"), 0, 2);
        form.add(dpServiceDate, 1, 2);
        form.add(new Label("Service Description:"), 0, 3);
        form.add(txtServiceDescription, 1, 3);
        form.add(new Label("Cost:"), 0, 4);
        form.add(txtCost, 1, 4);
        form.add(messageLabel, 1, 5);

        // Buttons
        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveService());
        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> servicesSection.hideAddForm());
        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);
        form.add(hboxButtons, 1, 6);
    }

    private void addInputConstraints() {
        txtCost.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtCost.setText(oldValue);
                messageLabel.setText("Cost must be a valid number.");
            } else {
                messageLabel.setText("");
            }
        });

        // text description  and should not be empty or null and should not contain only  spaces and letter
        txtServiceDescription.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z\\s]*")) {
                txtServiceDescription.setText(oldValue);
                messageLabel.setText("Description must contain only letters .");
            } else {
                messageLabel.setText("");
            }
        });
    }

    private void loadCarIDs() {
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT CarID FROM Cars ORDER BY CarID")) {
            List<Integer> carIDs = new ArrayList<>();
            while (rs.next()) {
                carIDs.add(rs.getInt("CarID"));
            }
            cbCarID.setItems(FXCollections.observableArrayList(carIDs));
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadCustomerIDs() {
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT CustomerID FROM Customers ORDER BY CustomerID")) {
            List<Integer> customerIDs = new ArrayList<>();
            while (rs.next()) {
                customerIDs.add(rs.getInt("CustomerID"));
            }
            cbCustomerID.setItems(FXCollections.observableArrayList(customerIDs));
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void saveService() {
        if (cbCarID.getValue() == null || cbCustomerID.getValue() == null ||
                dpServiceDate.getValue() == null || txtServiceDescription.getText().isEmpty() ||
                txtCost.getText().isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }

        double cost;
        try {
            cost = Double.parseDouble(txtCost.getText());
        } catch (NumberFormatException e) {
            messageLabel.setText("Cost must be a valid number.");
            return;
        }

        if (cost <= 0) {
            messageLabel.setText("Cost must be positive.");
            return;
        }

        try {
            String sql = "INSERT INTO Services (CarID, CustomerID, ServiceDate, ServiceDescription, Cost) VALUES (?, ?, ?, ?, ?)";
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, cbCarID.getValue());
                pstmt.setInt(2, cbCustomerID.getValue());
                pstmt.setDate(3, Date.valueOf(dpServiceDate.getValue()));
                pstmt.setString(4, txtServiceDescription.getText());
                pstmt.setDouble(5, cost);

                pstmt.executeUpdate();
                messageLabel.setText("Service saved successfully.");
                messageLabel.setStyle("-fx-text-fill: green;");
                clearFields();
                servicesSection.reloadScene();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            messageLabel.setText("Error saving service: " + e.getMessage());
            messageLabel.setStyle("-fx-text-fill: red;");
        }
    }

    private void clearFields() {
        cbCarID.getSelectionModel().clearSelection();
        cbCustomerID.getSelectionModel().clearSelection();
        dpServiceDate.setValue(LocalDate.now());
        txtServiceDescription.clear();
        txtCost.clear();
        messageLabel.setText("");
    }

    public GridPane getForm() {
        return form;
    }

    public void showAddForm() {
        clearFields();
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Service.java
```
package com.example;

import java.time.LocalDate;

public class Service {
    private int serviceID;
    private int carID;
    private int customerID;
    private LocalDate serviceDate;
    private String serviceDescription;
    private double cost;

    private String firstName;
    private String lastName;
    private String email;
    private String phone;
    private String address;
    private String city;
    private String state;
    private String zipCode;

    private String carMake;
    private String carModel;
    private int carYear;
    private double carPrice;
    private int carStock;
    private String vin;

    // Full Constructor
    public Service(int serviceID, int carID, int customerID, LocalDate serviceDate, String serviceDescription, double cost,
                   String firstName, String lastName, String email, String phone, String address, String city, String state, String zipCode,
                   String carMake, String carModel, int carYear, double carPrice, int carStock, String vin) {
        this.serviceID = serviceID;
        this.carID = carID;
        this.customerID = customerID;
        this.serviceDate = serviceDate;
        this.serviceDescription = serviceDescription;
        this.cost = cost;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phone = phone;
        this.address = address;
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
        this.carMake = carMake;
        this.carModel = carModel;
        this.carYear = carYear;
        this.carPrice = carPrice;
        this.carStock = carStock;
        this.vin = vin;
    }

    // Constructor for basic service fields
    public Service(int serviceID, int carID, int customerID, LocalDate serviceDate, String serviceDescription, double cost) {
        this.serviceID = serviceID;
        this.carID = carID;
        this.customerID = customerID;
        this.serviceDate = serviceDate;
        this.serviceDescription = serviceDescription;
        this.cost = cost;
    }

    // Getters and Setters for basic service fields
    public int getServiceID() {
        return serviceID;
    }

    public void setServiceID(int serviceID) {
        this.serviceID = serviceID;
    }

    public int getCarID() {
        return carID;
    }

    public void setCarID(int carID) {
        this.carID = carID;
    }

    public int getCustomerID() {
        return customerID;
    }

    public void setCustomerID(int customerID) {
        this.customerID = customerID;
    }

    public LocalDate getServiceDate() {
        return serviceDate;
    }

    public void setServiceDate(LocalDate serviceDate) {
        this.serviceDate = serviceDate;
    }

    public String getServiceDescription() {
        return serviceDescription;
    }

    public void setServiceDescription(String serviceDescription) {
        this.serviceDescription = serviceDescription;
    }

    public double getCost() {
        return cost;
    }

    public void setCost(double cost) {
        this.cost = cost;
    }

    // Getters and Setters for additional customer details
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    // Getters and Setters for additional car details
    public String getCarMake() {
        return carMake;
    }

    public void setCarMake(String carMake) {
        this.carMake = carMake;
    }

    public String getCarModel() {
        return carModel;
    }

    public void setCarModel(String carModel) {
        this.carModel = carModel;
    }

    public int getCarYear() {
        return carYear;
    }

    public void setCarYear(int carYear) {
        this.carYear = carYear;
    }

    public double getCarPrice() {
        return carPrice;
    }

    public void setCarPrice(double carPrice) {
        this.carPrice = carPrice;
    }

    public int getCarStock() {
        return carStock;
    }

    public void setCarStock(int carStock) {
        this.carStock = carStock;
    }

    public String getVin() {
        return vin;
    }

    public void setVin(String vin) {
        this.vin = vin;
    }

    @Override
    public String toString() {
        return "Service{" +
                "serviceID=" + serviceID +
                ", carID=" + carID +
                ", customerID=" + customerID +
                ", serviceDate=" + serviceDate +
                ", serviceDescription='" + serviceDescription + '\'' +
                ", cost=" + cost +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", email='" + email + '\'' +
                ", phone='" + phone + '\'' +
                ", address='" + address + '\'' +
                ", city='" + city + '\'' +
                ", state='" + state + '\'' +
                ", zipCode='" + zipCode + '\'' +
                ", carMake='" + carMake + '\'' +
                ", carModel='" + carModel + '\'' +
                ", carYear=" + carYear +
                ", carPrice=" + carPrice +
                ", carStock=" + carStock +
                ", vin='" + vin + '\'' +
                '}';
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Revenue.java
```
package com.example;
public class Revenue {
    private String date;  // Full date for Monthly, Quarter for Quarterly
    private String serviceType;
    private double revenue;

    public Revenue(String date, String serviceType, double revenue) {
        this.date = date;
        this.serviceType = serviceType;
        this.revenue = revenue;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getServiceType() {
        return serviceType;
    }

    public void setServiceType(String serviceType) {
        this.serviceType = serviceType;
    }

    public double getRevenue() {
        return revenue;
    }

    public void setRevenue(double revenue) {
        this.revenue = revenue;
    }

    @Override
    public String toString() {
        return "Revenue{" +
                "date='" + date + '\'' +
                ", serviceType='" + serviceType + '\'' +
                ", revenue=" + revenue +
                '}';
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ReportsSection.java
```
// In ReportsSection.java
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

public class ReportsSection {
    private VBox view;

    public ReportsSection() {
        view = new VBox(10);
        view.setPadding(new Insets(10));

        Label lblTitle = new Label("Reports");
        lblTitle.setFont(Font.font("Arial", FontWeight.BOLD, 24));

        // Buttons for each report
        Button btnReportA = ButtonFactory.createActionButton("Services on Specific Car/Customer");
        Button btnReportB = ButtonFactory.createActionButton("Sales by Employee");
        Button btnReportC = ButtonFactory.createActionButton("Payments by Customer");
        Button btnReportD = ButtonFactory.createActionButton("Revenue by Service Type");
        Button btnReportE = ButtonFactory.createActionButton("Service Frequency");
        Button btnReportF = ButtonFactory.createActionButton("Service Cost History");

        // Style buttons (optional)
        btnReportA.setMaxWidth(Double.MAX_VALUE);
        btnReportB.setMaxWidth(Double.MAX_VALUE);
        btnReportC.setMaxWidth(Double.MAX_VALUE);
        btnReportD.setMaxWidth(Double.MAX_VALUE);
        btnReportE.setMaxWidth(Double.MAX_VALUE);
        btnReportF.setMaxWidth(Double.MAX_VALUE);

        // Add event handlers
        btnReportA.setOnAction(e -> showReportA());
        btnReportB.setOnAction(e -> showReportB());
        btnReportC.setOnAction(e -> showReportC());
        btnReportD.setOnAction(e -> showReportD());
        btnReportE.setOnAction(e -> showReportE());
        btnReportF.setOnAction(e -> showReportF());

        // Arrange buttons in a VBox
        VBox buttonsBox = new VBox(10, btnReportA, btnReportB, btnReportC, btnReportD, btnReportE, btnReportF);
        buttonsBox.setAlignment(Pos.TOP_CENTER);
        buttonsBox.setPadding(new Insets(20));

        // Add title and buttons to the main view
        view.getChildren().addAll(lblTitle, buttonsBox);
    }

    public VBox getView() {
        return view;
    }

    // Methods to display each report
    private void showReportA() {
        ReportAView reportA = new ReportAView();
        view.getChildren().clear();
        view.getChildren().addAll(new Label("Report A: Services on Specific Car/Customer"), reportA.getView());
    }

    private void showReportB() {
        ReportBView reportB = new ReportBView();
        view.getChildren().clear();
        view.getChildren().addAll(new Label("Report B: Sales by Employee"), reportB.getView());
    }
    private void showReportC() {
        ReportCView reportC = new ReportCView();
        view.getChildren().clear();
        view.getChildren().addAll(new Label("Report C: Payments by Customer"), reportC.getView());
    }
    private void showReportD() {
        ReportDView reportD = new ReportDView();
        view.getChildren().clear();
        view.getChildren().addAll(new Label("Report D: Revenue by Service Type"), reportD.getView());
    }
    private void showReportE() {
        ReportEView reportE = new ReportEView();
        view.getChildren().clear();
        view.getChildren().addAll(new Label("Report E: Service Frequency"), reportE.getView());
    }
    private void showReportF() {
        ReportFView reportF = new ReportFView();
        view.getChildren().clear();
        view.getChildren().addAll(new Label("Report F: Service Cost History"), reportF.getView());
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ReportFView.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;

import java.sql.*;

public class ReportFView {
    private VBox view;
    private TableView<ServiceDetail> tableView;
    private TextField txtCarID;
    private Button btnGenerate;

    public ReportFView() {
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Input fields
        HBox inputBox = new HBox(10);
        inputBox.setAlignment(Pos.CENTER_LEFT);

        txtCarID = new TextField();
        txtCarID.setPromptText("Car ID");

        btnGenerate = ButtonFactory.createActionButton("Generate Report");
        btnGenerate.setOnAction(e -> generateReport());

        inputBox.getChildren().addAll(new Label("Car ID:"), txtCarID, btnGenerate);

        // TableView setup
        tableView = new TableView<>();
        tableView.setPrefHeight(400);

        TableColumn<ServiceDetail, Integer> colServiceID = new TableColumn<>("Service ID");
        colServiceID.setCellValueFactory(new PropertyValueFactory<>("serviceID"));

        TableColumn<ServiceDetail, Integer> colCarID = new TableColumn<>("Car ID");
        colCarID.setCellValueFactory(new PropertyValueFactory<>("carID"));

        TableColumn<ServiceDetail, String> colMake = new TableColumn<>("Make");
        colMake.setCellValueFactory(new PropertyValueFactory<>("make"));

        TableColumn<ServiceDetail, String> colModel = new TableColumn<>("Model");
        colModel.setCellValueFactory(new PropertyValueFactory<>("model"));

        TableColumn<ServiceDetail, Date> colServiceDate = new TableColumn<>("Service Date");
        colServiceDate.setCellValueFactory(new PropertyValueFactory<>("serviceDate"));

        TableColumn<ServiceDetail, String> colDescription = new TableColumn<>("Description");
        colDescription.setCellValueFactory(new PropertyValueFactory<>("serviceDescription"));

        TableColumn<ServiceDetail, Double> colCost = new TableColumn<>("Cost");
        colCost.setCellValueFactory(new PropertyValueFactory<>("cost"));

        tableView.getColumns().addAll(colServiceID, colCarID, colMake, colModel, colServiceDate, colDescription,
                colCost);
        tableView.getColumns().forEach(column -> column.setReorderable(false));

        view.getChildren().addAll(inputBox, tableView);
    }

    public VBox getView() {
        return view;
    }

    private void generateReport() {
        String carID = txtCarID.getText().trim();

        if (carID.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Input Required", "Please enter a Car ID.");
            return;
        }

        String query = "SELECT s.ServiceID, s.CarID, c.Make, c.Model, s.ServiceDate, s.ServiceDescription, s.Cost " +
                "FROM services s " +
                "JOIN cars c ON s.CarID = c.CarID " +
                "WHERE s.CarID = ? " +
                "ORDER BY s.ServiceDate DESC";

        try (Connection conn = DatabaseConnection.getConnection();
                PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setInt(1, Integer.parseInt(carID));
            ResultSet rs = pstmt.executeQuery();

            ObservableList<ServiceDetail> data = FXCollections.observableArrayList();
            while (rs.next()) {
                data.add(new ServiceDetail(
                        rs.getInt("ServiceID"),
                        rs.getInt("CarID"),
                        rs.getString("Make"),
                        rs.getString("Model"),
                        rs.getDate("ServiceDate"),
                        rs.getString("ServiceDescription"),
                        rs.getDouble("Cost")));
            }
            tableView.setItems(data);

            if (data.isEmpty()) {
                showAlert(Alert.AlertType.INFORMATION, "No Data", "No service history found for the specified Car ID.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Database Error", "An error occurred while fetching the report.");
        } catch (NumberFormatException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Input Error", "Car ID must be a valid number.");
        }
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Inner class to represent the service detail
    public static class ServiceDetail {
        private final int serviceID;
        private final int carID;
        private final String make;
        private final String model;
        private final Date serviceDate;
        private final String serviceDescription;
        private final Double cost;

        public ServiceDetail(int serviceID, int carID, String make, String model, Date serviceDate,
                String serviceDescription, Double cost) {
            this.serviceID = serviceID;
            this.carID = carID;
            this.make = make;
            this.model = model;
            this.serviceDate = serviceDate;
            this.serviceDescription = serviceDescription;
            this.cost = cost;
        }

        public int getServiceID() {
            return serviceID;
        }

        public int getCarID() {
            return carID;
        }

        public String getMake() {
            return make;
        }

        public String getModel() {
            return model;
        }

        public Date getServiceDate() {
            return serviceDate;
        }

        public String getServiceDescription() {
            return serviceDescription;
        }

        public Double getCost() {
            return cost;
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ReportEView.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;

import java.sql.*;

public class ReportEView {
    private VBox view;
    private TableView<ServiceFrequency> tableView;
    private ComboBox<String> cmbReportType;
    private Button btnGenerate;

    public ReportEView() {
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Selection for report type
        HBox selectionBox = new HBox(10);
        selectionBox.setAlignment(Pos.CENTER_LEFT);

        cmbReportType = new ComboBox<>();
        cmbReportType.getItems().addAll("Car Model", "Customer Category (State)", "Customer Category (City)");
        cmbReportType.setValue("Car Model"); // Default selection

        btnGenerate = ButtonFactory.createActionButton("Generate Report");
        btnGenerate.setOnAction(e -> generateReport());

        selectionBox.getChildren().addAll(new Label("Report Type:"), cmbReportType, btnGenerate);

        // TableView setup
        tableView = new TableView<>();
        tableView.setPrefHeight(400);

        TableColumn<ServiceFrequency, String> colCategory = new TableColumn<>("Category");
        colCategory.setCellValueFactory(new PropertyValueFactory<>("category"));

        TableColumn<ServiceFrequency, Integer> colFrequency = new TableColumn<>("Service Frequency");
        colFrequency.setCellValueFactory(new PropertyValueFactory<>("frequency"));

        tableView.getColumns().addAll(colCategory, colFrequency);
        tableView.getColumns().forEach(column -> column.setReorderable(false));

        view.getChildren().addAll(selectionBox, tableView);
    }

    public VBox getView() {
        return view;
    }

    private void generateReport() {
        String reportType = cmbReportType.getValue();

        String query;
        if (reportType.equals("Car Model")) {
            query = "SELECT c.Model AS Category, COUNT(s.ServiceID) AS Frequency " +
                    "FROM services s " +
                    "JOIN cars c ON s.CarID = c.CarID " +
                    "GROUP BY c.Model " +
                    "ORDER BY Frequency DESC";
        } else if (reportType.equals("Customer Category (State)")) {
            query = "SELECT cu.State AS Category, COUNT(s.ServiceID) AS Frequency " +
                    "FROM services s " +
                    "JOIN customers cu ON s.CustomerID = cu.CustomerID " +
                    "GROUP BY cu.State " +
                    "ORDER BY Frequency DESC";
        } else if (reportType.equals("Customer Category (City)")) {
            query = "SELECT cu.City AS Category, COUNT(s.ServiceID) AS Frequency " +
                    "FROM services s " +
                    "JOIN customers cu ON s.CustomerID = cu.CustomerID " +
                    "GROUP BY cu.City " +
                    "ORDER BY Frequency DESC";
        } else {
            showAlert(Alert.AlertType.ERROR, "Invalid Selection", "Invalid report type selected.");
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            ObservableList<ServiceFrequency> data = FXCollections.observableArrayList();
            while (rs.next()) {
                data.add(new ServiceFrequency(
                        rs.getString("Category"),
                        rs.getInt("Frequency")
                ));
            }
            tableView.setItems(data);

            if (data.isEmpty()) {
                showAlert(Alert.AlertType.INFORMATION, "No Data", "No services found for the selected report type.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Database Error", "An error occurred while generating the report.");
        }
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Inner class to represent the service frequency
    public static class ServiceFrequency {
        private final String category;
        private final Integer frequency;

        public ServiceFrequency(String category, Integer frequency) {
            this.category = category;
            this.frequency = frequency;
        }

        public String getCategory() {
            return category;
        }

        public Integer getFrequency() {
            return frequency;
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ReportDView.java
```
package com.example;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ReportDView {
    private VBox view;
    private TableView<Revenue> tableView;
    private TableView<MonthlyService> serviceCountTableView;  // New table for service count
    private ComboBox<String> periodSelector;
    private Button btnGenerate;

    public ReportDView() {
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Input fields
        HBox inputBox = new HBox(10);
        inputBox.setAlignment(Pos.CENTER_LEFT);

        periodSelector = new ComboBox<>();
        periodSelector.getItems().addAll("Monthly", "Quarterly");
        periodSelector.setPromptText("Select Period");

        btnGenerate = new Button("Generate Report");
        btnGenerate.setOnAction(e -> generateReport());

        inputBox.getChildren().addAll(new Label("Select Period:"), periodSelector, btnGenerate);

        // TableView setup for revenue data
        tableView = new TableView<>();
        tableView.setPrefHeight(200);

        TableColumn<Revenue, String> colDate = new TableColumn<>("Date/Quarter");
        colDate.setCellValueFactory(new PropertyValueFactory<>("date"));

        TableColumn<Revenue, String> colServiceType = new TableColumn<>("Service Type");
        colServiceType.setCellValueFactory(new PropertyValueFactory<>("serviceType"));

        TableColumn<Revenue, Double> colRevenue = new TableColumn<>("Revenue");
        colRevenue.setCellValueFactory(new PropertyValueFactory<>("revenue"));

        tableView.getColumns().addAll(colDate, colServiceType, colRevenue);

        // New table for service count data
        serviceCountTableView = new TableView<>();
        serviceCountTableView.setPrefHeight(200);

        TableColumn<MonthlyService, String> colServiceDate = new TableColumn<>("Date/Quarter");
        colServiceDate.setCellValueFactory(new PropertyValueFactory<>("date"));

        TableColumn<MonthlyService, String> colServiceDescription = new TableColumn<>("Service Type");
        colServiceDescription.setCellValueFactory(new PropertyValueFactory<>("serviceDescription"));

        TableColumn<MonthlyService, Integer> colServiceCount = new TableColumn<>("Service Count");
        colServiceCount.setCellValueFactory(new PropertyValueFactory<>("serviceCount"));

        serviceCountTableView.getColumns().addAll(colServiceDate, colServiceDescription, colServiceCount);

        // Add both tables to the layout
        view.getChildren().addAll(inputBox, tableView, serviceCountTableView);
    }

    public VBox getView() {
        return view;
    }

    private void generateReport() {
        String selectedPeriod = periodSelector.getValue();

        if (selectedPeriod == null) {
            showAlert(Alert.AlertType.WARNING, "Input Required", "Please select a period.");
            return;
        }

        String query;
        if (selectedPeriod.equals("Monthly")) {
            query = "SELECT DATE_FORMAT(s.ServiceDate, '%Y-%m-%d') AS Date, s.ServiceDescription AS ServiceType, SUM(s.Cost) AS Revenue " +
                    "FROM car.services s " +
                    "GROUP BY DATE_FORMAT(s.ServiceDate, '%Y-%m-%d'), s.ServiceDescription " +
                    "ORDER BY Date, s.ServiceDescription";
        } else { // Quarterly
            query = "SELECT CONCAT('Q', QUARTER(s.ServiceDate), '-', YEAR(s.ServiceDate)) AS Quarter, s.ServiceDescription AS ServiceType, SUM(s.Cost) AS Revenue " +
                    "FROM car.services s " +
                    "GROUP BY QUARTER(s.ServiceDate), YEAR(s.ServiceDate), s.ServiceDescription " +
                    "ORDER BY Quarter, s.ServiceDescription";
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            ResultSet rs = pstmt.executeQuery();

            ObservableList<Revenue> data = FXCollections.observableArrayList();
            while (rs.next()) {
                String period;
                if (selectedPeriod.equals("Monthly")) {
                    period = rs.getString("Date");  // Full Date for Monthly
                } else {  // For Quarterly, show the quarter (e.g., Q1-2024)
                    period = rs.getString("Quarter");
                }

                data.add(new Revenue(
                        period,
                        rs.getString("ServiceType"),
                        rs.getDouble("Revenue")));
            }
            tableView.setItems(data);

            // Fetch service count data for the selected period
            fetchServiceCount(conn, selectedPeriod);

        } catch (SQLException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Error", "Database error occurred.");
        }
    }

    private void fetchServiceCount(Connection conn, String selectedPeriod) throws SQLException {
        String query;
        if (selectedPeriod.equals("Monthly")) {
            query = "SELECT DATE_FORMAT(s.ServiceDate, '%Y-%m-%d') AS Date, s.ServiceDescription, COUNT(s.ServiceID) AS ServiceCount " +
                    "FROM car.services s " +
                    "GROUP BY DATE_FORMAT(s.ServiceDate, '%Y-%m-%d'), s.ServiceDescription " +
                    "ORDER BY Date, s.ServiceDescription";
        } else { // Quarterly
            query = "SELECT CONCAT('Q', QUARTER(s.ServiceDate), '-', YEAR(s.ServiceDate)) AS Quarter, s.ServiceDescription, COUNT(s.ServiceID) AS ServiceCount " +
                    "FROM car.services s " +
                    "GROUP BY QUARTER(s.ServiceDate), YEAR(s.ServiceDate), s.ServiceDescription " +
                    "ORDER BY Quarter, s.ServiceDescription";
        }

        PreparedStatement pstmt = conn.prepareStatement(query);
        ResultSet rs = pstmt.executeQuery();

        ObservableList<MonthlyService> serviceCountData = FXCollections.observableArrayList();
        while (rs.next()) {
            String period;
            if (selectedPeriod.equals("Monthly")) {
                period = rs.getString("Date");  // Full Date for Monthly
            } else {  // For Quarterly, show the quarter (e.g., Q1-2024)
                period = rs.getString("Quarter");
            }

            serviceCountData.add(new MonthlyService(
                    period,
                    rs.getString("ServiceDescription"),
                    rs.getInt("ServiceCount")));
        }
        serviceCountTableView.setItems(serviceCountData);
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ReportCView.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ReportCView {
    private VBox view;
    private TableView<Payment> tableView;
    private TextField txtCustomerID;
    private Button btnGenerate;

    public ReportCView() {
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Input fields
        HBox inputBox = new HBox(10);
        inputBox.setAlignment(Pos.CENTER_LEFT);

        txtCustomerID = new TextField();
        txtCustomerID.setPromptText("Customer ID");

        btnGenerate = ButtonFactory.createActionButton("Generate Report");
        btnGenerate.setOnAction(e -> generateReport());

        inputBox.getChildren().addAll(new Label("Customer ID:"), txtCustomerID, btnGenerate);

        // TableView setup
        tableView = new TableView<>();
        tableView.setPrefHeight(400);

        TableColumn<Payment, String> colFirstName = new TableColumn<>("First Name");
        colFirstName.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        TableColumn<Payment, String> colLastName = new TableColumn<>("Last Name");
        colLastName.setCellValueFactory(new PropertyValueFactory<>("lastName"));

        TableColumn<Payment, String> colPaymentMethod = new TableColumn<>("Payment Method");
        colPaymentMethod.setCellValueFactory(new PropertyValueFactory<>("paymentMethod"));

        TableColumn<Payment, Double> colTotalAmount = new TableColumn<>("Total Amount");
        colTotalAmount.setCellValueFactory(new PropertyValueFactory<>("amount"));

        tableView.getColumns().addAll(colFirstName, colLastName, colPaymentMethod, colTotalAmount);
        tableView.getColumns().forEach(column -> column.setReorderable(false));

        view.getChildren().addAll(inputBox, tableView);
    }

    public VBox getView() {
        return view;
    }

    private void generateReport() {
        String customerID = txtCustomerID.getText().trim();

        if (customerID.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Input Required", "Please enter a Customer ID.");
            return;
        }

        String query = "SELECT c.FirstName, c.LastName, p.PaymentMethod, SUM(p.Amount) AS TotalAmount " +
                "FROM payments p " +
                "JOIN orders o ON p.OrderID = o.OrderID " +
                "JOIN customers c ON o.CustomerID = c.CustomerID " +
                "WHERE o.CustomerID = ? " +
                "GROUP BY c.FirstName, c.LastName, p.PaymentMethod";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setInt(1, Integer.parseInt(customerID));
            ResultSet rs = pstmt.executeQuery();

            ObservableList<Payment> data = FXCollections.observableArrayList();
            while (rs.next()) {
                data.add(new Payment(
                        0, // Placeholder PaymentID as it's not used here
                        0, // Placeholder OrderID as it's not used here
                        null, // PaymentDate not needed here
                        rs.getString("PaymentMethod"),
                        rs.getDouble("TotalAmount"),
                        rs.getString("FirstName"),
                        rs.getString("LastName")));
            }
            tableView.setItems(data);

        } catch (SQLException | NumberFormatException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Error", "Invalid input or database error.");
        }
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ReportBView.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;

import java.sql.*;

public class ReportBView {
    private VBox view;
    private TableView<Order> tableView;
    private TextField txtEmployeeID;
    private Button btnGenerate;
    private Label lblErrorMessage; // Label for error messages

    public ReportBView() {
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Input fields
        HBox inputBox = new HBox(10);
        inputBox.setAlignment(Pos.CENTER_LEFT);

        txtEmployeeID = new TextField();
        txtEmployeeID.setPromptText("Employee ID");

        btnGenerate = ButtonFactory.createActionButton("Generate Report");
        btnGenerate.setOnAction(e -> generateReport());

        lblErrorMessage = new Label(); // Initialize the error message label
        lblErrorMessage.setStyle("-fx-text-fill: red;"); // Set red color for error text

        inputBox.getChildren().addAll(new Label("Employee ID:"), txtEmployeeID, btnGenerate);

        // TableView setup
        tableView = new TableView<>();
        tableView.setPrefHeight(400);

        TableColumn<Order, Integer> colOrderID = new TableColumn<>("Order ID");
        colOrderID.setCellValueFactory(new PropertyValueFactory<>("orderID"));

        TableColumn<Order, Date> colOrderDate = new TableColumn<>("Order Date");
        colOrderDate.setCellValueFactory(new PropertyValueFactory<>("orderDate"));

        TableColumn<Order, Integer> colCarID = new TableColumn<>("Car ID");
        colCarID.setCellValueFactory(new PropertyValueFactory<>("carID"));

        TableColumn<Order, Integer> colCustomerID = new TableColumn<>("Customer ID");
        colCustomerID.setCellValueFactory(new PropertyValueFactory<>("customerID"));

        TableColumn<Order, Integer> colEmployeeID = new TableColumn<>("Employee ID");
        colEmployeeID.setCellValueFactory(new PropertyValueFactory<>("employeeID"));

        TableColumn<Order, Integer> colQuantity = new TableColumn<>("Quantity");
        colQuantity.setCellValueFactory(new PropertyValueFactory<>("quantity"));

        TableColumn<Order, Double> colTotalPrice = new TableColumn<>("Total Price");
        colTotalPrice.setCellValueFactory(new PropertyValueFactory<>("totalPrice"));

        tableView.getColumns().addAll(colOrderID, colOrderDate, colCarID, colCustomerID, colEmployeeID, colQuantity, colTotalPrice);
        tableView.getColumns().forEach(column -> column.setReorderable(false));

        // Add input box, error label, and table to the view
        view.getChildren().addAll(inputBox, lblErrorMessage, tableView);
    }

    public VBox getView() {
        return view;
    }

    private void generateReport() {
        lblErrorMessage.setText(""); // Clear the error message

        String employeeID = txtEmployeeID.getText().trim();

        if (employeeID.isEmpty()) {
            lblErrorMessage.setText("Please enter an Employee ID.");
            return;
        }

        String query = "SELECT * FROM orders WHERE EmployeeID = ?";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setInt(1, Integer.parseInt(employeeID));
            ResultSet rs = pstmt.executeQuery();

            ObservableList<Order> data = FXCollections.observableArrayList();
            while (rs.next()) {
                data.add(new Order(
                        rs.getInt("OrderID"),
                        rs.getDate("OrderDate"),
                        rs.getInt("CarID"),
                        rs.getInt("CustomerID"),
                        rs.getInt("EmployeeID"),
                        rs.getInt("Quantity"),
                        rs.getDouble("TotalPrice")
                ));
            }
            tableView.setItems(data);

        } catch (SQLException e) {
            lblErrorMessage.setText("Database error occurred. Please try again.");
        } catch (NumberFormatException e) {
            lblErrorMessage.setText("Invalid input. Please ensure the Employee ID is number.");
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ReportAView.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

import java.sql.*;
import java.time.LocalDate;

public class ReportAView {
    private VBox view;
    private TableView<Service> tableView;
    private TextField txtCarID;
    private TextField txtCustomerID;
    private Button btnGenerate;
    private Label lblErrorMessage; // Label for error messages

    public ReportAView() {
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Input fields
        HBox inputBox = new HBox(10);
        inputBox.setAlignment(Pos.CENTER_LEFT);

        txtCarID = new TextField();
        txtCarID.setPromptText("Car ID");

        txtCustomerID = new TextField();
        txtCustomerID.setPromptText("Customer ID");

        btnGenerate = ButtonFactory.createActionButton("Generate Report");
        btnGenerate.setOnAction(e -> generateReport());

        lblErrorMessage = new Label(); // Initialize the error message label
        lblErrorMessage.setStyle("-fx-text-fill: red;"); // Set red color for error text

        inputBox.getChildren().addAll(new Label("Car ID:"), txtCarID, new Label("Customer ID:"), txtCustomerID,
                btnGenerate);

        // TableView setup
        tableView = new TableView<>();
        tableView.setPrefHeight(400);

        TableColumn<Service, Integer> colServiceID = new TableColumn<>("Service ID");
        colServiceID.setCellValueFactory(new PropertyValueFactory<>("serviceID"));

        TableColumn<Service, String> colFirstName = new TableColumn<>("First Name");
        colFirstName.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        TableColumn<Service, String> colLastName = new TableColumn<>("Last Name");
        colLastName.setCellValueFactory(new PropertyValueFactory<>("lastName"));

        TableColumn<Service, Integer> colCarID = new TableColumn<>("Car ID");
        colCarID.setCellValueFactory(new PropertyValueFactory<>("carID"));

        TableColumn<Service, Integer> colCustomerID = new TableColumn<>("Customer ID");
        colCustomerID.setCellValueFactory(new PropertyValueFactory<>("customerID"));

        TableColumn<Service, String> colCarMake = new TableColumn<>("Car Make");
        colCarMake.setCellValueFactory(new PropertyValueFactory<>("carMake"));

        TableColumn<Service, LocalDate> colServiceDate = new TableColumn<>("Service Date");
        colServiceDate.setCellValueFactory(new PropertyValueFactory<>("serviceDate"));

        TableColumn<Service, String> colDescription = new TableColumn<>("Description");
        colDescription.setCellValueFactory(new PropertyValueFactory<>("serviceDescription"));

        TableColumn<Service, Double> colCost = new TableColumn<>("Cost");
        colCost.setCellValueFactory(new PropertyValueFactory<>("cost"));

        TableColumn<Service, String> colEmail = new TableColumn<>("Email");
        colEmail.setCellValueFactory(new PropertyValueFactory<>("email"));

        TableColumn<Service, String> colPhone = new TableColumn<>("Phone");
        colPhone.setCellValueFactory(new PropertyValueFactory<>("phone"));

        // Add columns to TableView
        tableView.getColumns().addAll(colServiceID, colFirstName, colLastName, colCarID, colCustomerID, colCarMake,
                colServiceDate, colDescription, colCost, colEmail, colPhone);
        tableView.getColumns().forEach(column -> column.setReorderable(false));

        // Add input box, error label, and table to the view
        view.getChildren().addAll(inputBox, lblErrorMessage, tableView);
    }

    public VBox getView() {
        return view;
    }

    private void generateReport() {
        lblErrorMessage.setText(""); // Clear the error message

        String carID = txtCarID.getText().trim();
        String customerID = txtCustomerID.getText().trim();

        StringBuilder query = new StringBuilder(
                "SELECT s.ServiceID, s.CarID, s.CustomerID, s.ServiceDate, s.ServiceDescription, s.Cost, " +
                        "c.FirstName, c.LastName, c.Email, c.Phone, c.Address, c.City, c.State, c.ZipCode, " +
                        "ca.Make, ca.Model, ca.Year, ca.Price, ca.Stock, ca.VIN " +
                        "FROM services s " +
                        "JOIN customers c ON s.CustomerID = c.CustomerID " +
                        "JOIN cars ca ON s.CarID = ca.CarID WHERE 1=1");

        if (!carID.isEmpty()) {
            query.append(" AND s.CarID = ?");
        }
        if (!customerID.isEmpty()) {
            query.append(" AND s.CustomerID = ?");
        }

        try (Connection conn = DatabaseConnection.getConnection();
                PreparedStatement pstmt = conn.prepareStatement(query.toString())) {

            int paramIndex = 1;
            if (!carID.isEmpty()) {
                pstmt.setInt(paramIndex++, Integer.parseInt(carID));
            }
            if (!customerID.isEmpty()) {
                pstmt.setInt(paramIndex++, Integer.parseInt(customerID));
            }

            ResultSet rs = pstmt.executeQuery();
            ObservableList<Service> data = FXCollections.observableArrayList();
            while (rs.next()) {
                data.add(new Service(
                        rs.getInt("ServiceID"),
                        rs.getInt("CarID"),
                        rs.getInt("CustomerID"),
                        rs.getDate("ServiceDate").toLocalDate(),
                        rs.getString("ServiceDescription"),
                        rs.getDouble("Cost"),
                        rs.getString("FirstName"),
                        rs.getString("LastName"),
                        rs.getString("Email"),
                        rs.getString("Phone"),
                        rs.getString("Address"),
                        rs.getString("City"),
                        rs.getString("State"),
                        rs.getString("ZipCode"),
                        rs.getString("Make"),
                        rs.getString("Model"),
                        rs.getInt("Year"),
                        rs.getDouble("Price"),
                        rs.getInt("Stock"),
                        rs.getString("VIN")));
            }
            tableView.setItems(data);

        } catch (SQLException e) {
            lblErrorMessage.setText("Database error occurred. Please try again.");
        } catch (NumberFormatException e) {
            lblErrorMessage.setText("Invalid input. Please ensure ID fields are number.");
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\PaymentsSection.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.util.Callback;
import org.kordamp.ikonli.javafx.FontIcon;

import java.sql.*;
import java.time.LocalDate;
import java.util.Optional;

public class PaymentsSection {
    private TableView<Payment> paymentsTableView;
    private VBox view;
    private PaymentEditForm paymentEditForm;
    private PaymentAddForm paymentAddForm;
    private ObservableList<Payment> paymentsData;

    public PaymentsSection() {
        // Initialize forms
        paymentEditForm = new PaymentEditForm(this);
        paymentAddForm = new PaymentAddForm(this);
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Create the TableView
        paymentsTableView = new TableView<>();
        paymentsTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        paymentsTableView.setPrefSize(750, 400);

        // Define columns
        TableColumn<Payment, Integer> colPaymentID = new TableColumn<>("Payment ID");
        colPaymentID.setCellValueFactory(new PropertyValueFactory<>("paymentID"));

        TableColumn<Payment, Integer> colOrderID = new TableColumn<>("Order ID");
        colOrderID.setCellValueFactory(new PropertyValueFactory<>("orderID"));

        TableColumn<Payment, LocalDate> colPaymentDate = new TableColumn<>("Payment Date");
        colPaymentDate.setCellValueFactory(new PropertyValueFactory<>("paymentDate"));

        TableColumn<Payment, String> colPaymentMethod = new TableColumn<>("Payment Method");
        colPaymentMethod.setCellValueFactory(new PropertyValueFactory<>("paymentMethod"));

        TableColumn<Payment, Double> colAmount = new TableColumn<>("Amount");
        colAmount.setCellValueFactory(new PropertyValueFactory<>("amount"));

        // Add Edit Icon Column
        TableColumn<Payment, Void> colEdit = createEditColumn();

        

        paymentsTableView.getColumns().addAll(
                colPaymentID, colOrderID, colPaymentDate,
                colPaymentMethod, colAmount, colEdit);
        paymentsTableView.getColumns().forEach(column -> column.setReorderable(false));

        // Load data from the database
        paymentsData = fetchPaymentData();
        FilteredList<Payment> filteredData = new FilteredList<>(paymentsData, p -> true);
        paymentsTableView.setItems(filteredData);

        // Create search fields
        TextField txtPaymentID = new TextField();
        txtPaymentID.setPromptText("Payment ID");

        TextField txtOrderID = new TextField();
        txtOrderID.setPromptText("Order ID");

        TextField txtPaymentDate = new TextField();
        txtPaymentDate.setPromptText("Payment Date");

        TextField txtPaymentMethod = new TextField();
        txtPaymentMethod.setPromptText("Payment Method");

        TextField txtAmount = new TextField();
        txtAmount.setPromptText("Amount");

        // Add filtering logic
        txtPaymentID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                payment -> filterPayments(payment, txtPaymentID, txtOrderID, txtPaymentDate, txtPaymentMethod, txtAmount)));

        txtOrderID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                payment -> filterPayments(payment, txtPaymentID, txtOrderID, txtPaymentDate, txtPaymentMethod, txtAmount)));

        txtPaymentDate.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                payment -> filterPayments(payment, txtPaymentID, txtOrderID, txtPaymentDate, txtPaymentMethod, txtAmount)));

        txtPaymentMethod.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                payment -> filterPayments(payment, txtPaymentID, txtOrderID, txtPaymentDate, txtPaymentMethod, txtAmount)));

        txtAmount.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                payment -> filterPayments(payment, txtPaymentID, txtOrderID, txtPaymentDate, txtPaymentMethod, txtAmount)));

        // Reset button to clear all text fields
        Button btnReset = ButtonFactory.createActionButton("Reset");
        btnReset.setOnAction(e -> {
            txtPaymentID.clear();
            txtOrderID.clear();
            txtPaymentDate.clear();
            txtPaymentMethod.clear();
            txtAmount.clear();
        });


        // Layout for search fields with label and reset button
        Label lblSearch = new Label("Search:");
        HBox searchFields = new HBox(15, lblSearch, txtPaymentID, txtOrderID, txtPaymentDate, txtPaymentMethod, txtAmount);
        searchFields.setAlignment(Pos.CENTER_LEFT);
        searchFields.setPadding(new Insets(5));

        // Add Buttons for Adding Payments
        Button btnAddPayment = ButtonFactory.createActionButton("Add Payment");
        btnAddPayment.setOnAction(e -> {
            hideEditForm(); // Hide edit form if visible
            showAddForm();
        });

        HBox hboxButtons = new HBox(10, btnAddPayment, btnReset);
        hboxButtons.setAlignment(Pos.CENTER);
        hboxButtons.setPadding(new Insets(10));

        // Add everything to the main view
        view.getChildren().addAll(lblSearch, searchFields, hboxButtons, paymentsTableView);
    }

    private TableColumn<Payment, Void> createEditColumn() {
        TableColumn<Payment, Void> colEdit = new TableColumn<>("Edit");
        colEdit.setCellFactory(param -> new TableCell<Payment, Void>() {
            private final Button editButton = ButtonFactory.createEditButton();

            {
                FontIcon editIcon = new FontIcon("fas-edit");
                editIcon.setIconSize(16);
                editButton.setGraphic(editIcon);
                editButton.setOnAction(event -> {
                    Payment payment = getTableView().getItems().get(getIndex());
                    hideAddForm(); // Hide the Add Form when Edit is clicked
                    showEditForm(payment);
                });
            }

            @Override
            public void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editButton);
                }
                setAlignment(Pos.CENTER);
            }
        });
        return colEdit;
    }



    private ObservableList<Payment> fetchPaymentData() {
        ObservableList<Payment> paymentList = FXCollections.observableArrayList();
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM payments")) {

            while (rs.next()) {
                paymentList.add(new Payment(
                        rs.getInt("PaymentID"),
                        rs.getInt("OrderID"),
                        rs.getDate("PaymentDate").toLocalDate(),
                        rs.getString("PaymentMethod"),
                        rs.getDouble("Amount")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return paymentList;
    }

    private boolean filterPayments(Payment payment, TextField txtPaymentID, TextField txtOrderID, TextField txtPaymentDate,
                                   TextField txtPaymentMethod, TextField txtAmount) {
        boolean matchesPaymentID = txtPaymentID.getText().isEmpty()
                || String.valueOf(payment.getPaymentID()).equals(txtPaymentID.getText());
        boolean matchesOrderID = txtOrderID.getText().isEmpty()
                || String.valueOf(payment.getOrderID()).equals(txtOrderID.getText());
        boolean matchesPaymentDate = txtPaymentDate.getText().isEmpty()
                || payment.getPaymentDate().toString().contains(txtPaymentDate.getText());
        boolean matchesPaymentMethod = txtPaymentMethod.getText().isEmpty()
                || payment.getPaymentMethod().toLowerCase().contains(txtPaymentMethod.getText().toLowerCase());
        boolean matchesAmount = txtAmount.getText().isEmpty()
                || String.valueOf(payment.getAmount()).contains(txtAmount.getText());

        return matchesPaymentID && matchesOrderID && matchesPaymentDate && matchesPaymentMethod && matchesAmount;
    }

    private void showEditForm(Payment payment) {
        paymentEditForm.showEditForm(payment);
        if (!view.getChildren().contains(paymentEditForm.getForm())) {
            view.getChildren().add(paymentEditForm.getForm());
        }
    }

    private void showAddForm() {
        paymentAddForm.showAddForm();
        if (!view.getChildren().contains(paymentAddForm.getForm())) {
            view.getChildren().add(paymentAddForm.getForm());
        }
    }

   
    public void refreshData() {
        paymentsData = fetchPaymentData();
        paymentsTableView.setItems(paymentsData);
    }
    public void reloadScene() {
        // Get the parent layout (CarShopGUI's main content)
        VBox parent = (VBox) view.getParent();
        if (parent != null) {
            PaymentsSection refreshedPaymentsSection = new PaymentsSection();
            parent.getChildren().setAll(refreshedPaymentsSection.getView());
        }
    }
    public void hideEditForm() {
        view.getChildren().remove(paymentEditForm.getForm());
    }

    public void hideAddForm() {
        view.getChildren().remove(paymentAddForm.getForm());
    }

    public VBox getView() {
        return view;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\PaymentEditForm.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;

public class PaymentEditForm {
    private GridPane form;
    private DatePicker dpPaymentDate;
    private TextField txtOrderID;
    private TextField txtPaymentMethod;
    private TextField txtAmount;
    private Payment currentPayment;
    private PaymentsSection paymentsSection;
    private Label messageLabel; // Message label for displaying validation errors

    public PaymentEditForm(PaymentsSection paymentsSection) {
        this.paymentsSection = paymentsSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Labels and Controls
        Label lblOrderID = new Label("Order ID:");
        txtOrderID = new TextField();
        txtOrderID.setEditable(false); // Order ID should not be editable

        Label lblPaymentDate = new Label("Payment Date:");
        dpPaymentDate = new DatePicker();

        Label lblPaymentMethod = new Label("Payment Method:");
        txtPaymentMethod = new TextField();

        Label lblAmount = new Label("Amount:");
        txtAmount = new TextField();

        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");

        addInputConstraints();

        form.add(lblOrderID, 0, 0);
        form.add(txtOrderID, 1, 0);
        form.add(lblPaymentDate, 0, 1);
        form.add(dpPaymentDate, 1, 1);
        form.add(lblPaymentMethod, 0, 2);
        form.add(txtPaymentMethod, 1, 2);
        form.add(lblAmount, 0, 3);
        form.add(txtAmount, 1, 3);
        form.add(messageLabel, 1, 4);

        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> savePayment());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> paymentsSection.hideEditForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);

        form.add(hboxButtons, 1, 5);
    }

    private void addInputConstraints() {
        txtAmount.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtAmount.setText(oldValue);
                messageLabel.setText("Amount must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        txtPaymentMethod.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z\\s]*")) {
                txtPaymentMethod.setText(oldValue);
                messageLabel.setText("Payment Method must contain only letter.");
            } else {
                messageLabel.setText("");
            }
        });

        dpPaymentDate.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null && newValue.isAfter(LocalDate.now())) {
                dpPaymentDate.setValue(oldValue);
                messageLabel.setText("Payment Date must be today or in the past.");
            } else {
                messageLabel.setText("");
            }
        });
    }

    public void showEditForm(Payment payment) {
        this.currentPayment = payment;
        txtOrderID.setText(String.valueOf(payment.getOrderID()));
        dpPaymentDate.setValue(payment.getPaymentDate());
        txtPaymentMethod.setText(payment.getPaymentMethod());
        txtAmount.setText(String.format("%.2f", payment.getAmount()));
    }

    private void savePayment() {
        try {
            int orderID = Integer.parseInt(txtOrderID.getText());
            LocalDate paymentDateValue = dpPaymentDate.getValue();
            String paymentMethod = txtPaymentMethod.getText();
            double amount = Double.parseDouble(txtAmount.getText());

            if (paymentDateValue == null || paymentMethod.isEmpty() || amount <= 0) {
                messageLabel.setText("All fields are required and Amount must be positive.");
                messageLabel.setStyle("-fx-text-fill: red;");
                return;
            }

            String sql = "UPDATE payments SET PaymentDate = ?, PaymentMethod = ?, Amount = ? WHERE OrderID = ?";
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setDate(1, Date.valueOf(paymentDateValue));
                pstmt.setString(2, paymentMethod);
                pstmt.setDouble(3, amount);
                pstmt.setInt(4, orderID);

                int affectedRows = pstmt.executeUpdate();
                if (affectedRows > 0) {
                    messageLabel.setText("Payment updated successfully.");
                    messageLabel.setStyle("-fx-text-fill: green;");
                    clearFields();

                    paymentsSection.reloadScene();

                } else {
                    messageLabel.setText("No changes were made to the record.");
                    messageLabel.setStyle("-fx-text-fill: orange;");
                }
            } catch (SQLException e) {
                messageLabel.setText("Database error: " + e.getMessage());
                messageLabel.setStyle("-fx-text-fill: red;");
                e.printStackTrace();
            }
        } catch (NumberFormatException e) {
            messageLabel.setText("Invalid number format in Amount.");
            messageLabel.setStyle("-fx-text-fill: red;");
        }
    }

    public GridPane getForm() {
        return form;
    }
    private void clearFields() {
        dpPaymentDate.setValue(LocalDate.now());
        txtOrderID.clear();
        txtPaymentMethod.clear();
        txtAmount.clear();
        messageLabel.setText("");
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\PaymentAddForm.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class PaymentAddForm {
    private GridPane form;
    private DatePicker dpPaymentDate;
    private ComboBox<Integer> cbOrderID;
    private TextField txtPaymentMethod;
    private TextField txtAmount;
    private PaymentsSection paymentsSection;
    private Label messageLabel; // Message label for displaying validation errors

    public PaymentAddForm(PaymentsSection paymentsSection) {
        this.paymentsSection = paymentsSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Labels and Controls
        Label lblPaymentDate = new Label("Payment Date:");
        dpPaymentDate = new DatePicker();
        dpPaymentDate.setValue(LocalDate.now());

        Label lblOrderID = new Label("Order ID:");
        cbOrderID = new ComboBox<>();
        orderids();

        Label lblPaymentMethod = new Label("Payment Method:");
        txtPaymentMethod = new TextField();

        Label lblAmount = new Label("Amount:");
        txtAmount = new TextField();

        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
        addInputConstraints();

        form.add(lblPaymentDate, 0, 0);
        form.add(dpPaymentDate, 1, 0);
        form.add(lblOrderID, 0, 1);
        form.add(cbOrderID, 1, 1);
        form.add(lblPaymentMethod, 0, 2);
        form.add(txtPaymentMethod, 1, 2);
        form.add(lblAmount, 0, 3);
        form.add(txtAmount, 1, 3);
        form.add(messageLabel, 1, 4);

        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> savePayment());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> paymentsSection.hideAddForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);

        form.add(hboxButtons, 1, 5);
    }

    private void addInputConstraints() {
        txtAmount.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtAmount.setText(oldValue);
                messageLabel.setText("Amount must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });
        txtPaymentMethod.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z\\s]*")) {
                txtPaymentMethod.setText(oldValue);
                messageLabel.setText("Payment Method must contain only letters .");
            } else {
                messageLabel.setText("");
            }
        });

        dpPaymentDate.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null && newValue.isAfter(LocalDate.now())) {
                dpPaymentDate.setValue(oldValue);
                messageLabel.setText("Payment Date must be today or in the past.");
            } else {
                messageLabel.setText("");
            }
        });
    }

    private void orderids() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            Statement stmt = conn.createStatement();
            String q2 = "SELECT OrderID FROM Orders ORDER BY OrderID ASC";
            ResultSet resultSet = stmt.executeQuery(q2);
            List<Integer> orderIDs = new ArrayList<>();
            while (resultSet.next()) {
                orderIDs.add(resultSet.getInt("OrderID"));
            }
            ObservableList<Integer> observableList = FXCollections.observableArrayList(orderIDs);
            cbOrderID.setItems(observableList);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void savePayment() {
        LocalDate paymentDateValue = dpPaymentDate.getValue();
        Integer orderID = cbOrderID.getValue();
        String paymentMethod = txtPaymentMethod.getText();
        String amountStr = txtAmount.getText();

        if (paymentDateValue == null || orderID == null || paymentMethod.isEmpty() || amountStr.isEmpty()) {
            messageLabel.setText("All fields are required and must be valid.");
            return;
        }

        double amount;
        try {
            amount = Double.parseDouble(amountStr);
        } catch (NumberFormatException e) {
            messageLabel.setText("Amount must be a valid number.");
            return;
        }

        if (amount <= 0) {
            messageLabel.setText("Amount must be positive.");
            return;
        }

        try {
            Date paymentDate = Date.valueOf(paymentDateValue);
            String sql = "INSERT INTO Payments (PaymentDate, OrderID, PaymentMethod, Amount) VALUES (?, ?, ?, ?)";
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setDate(1, paymentDate);
                pstmt.setInt(2, orderID);
                pstmt.setString(3, paymentMethod);
                pstmt.setDouble(4, amount);

                pstmt.executeUpdate();
                messageLabel.setText("Payment saved successfully.");
                messageLabel.setStyle("-fx-text-fill: green;");
                clearFields();
                paymentsSection.reloadScene();
            } catch (SQLException e) {
                e.printStackTrace();
                messageLabel.setText("Error saving payment: " + e.getMessage());
                messageLabel.setStyle("-fx-text-fill: red;");
            }
        } catch (Exception e) {
            messageLabel.setText("An error occurred: " + e.getMessage());
            messageLabel.setStyle("-fx-text-fill: red;");
        }
    }

    private void clearFields() {
        dpPaymentDate.setValue(LocalDate.now());
        cbOrderID.getSelectionModel().clearSelection();
        txtPaymentMethod.clear();
        txtAmount.clear();
        messageLabel.setText("");
    }

    public GridPane getForm() {
        return form;
    }

    public void showAddForm() {
        clearFields();
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Payment.java
```
package com.example;

import java.time.LocalDate;

public class Payment {
    private int paymentID;
    private int orderID;
    private LocalDate paymentDate;
    private String paymentMethod;
    private double amount;
    private String firstName; // Added for ReportCView
    private String lastName; // Added for ReportCView

    // Constructor
    public Payment(int paymentID, int orderID, LocalDate paymentDate, String paymentMethod, double amount) {
        this.paymentID = paymentID;
        this.orderID = orderID;
        this.paymentDate = paymentDate;
        this.paymentMethod = paymentMethod;
        this.amount = amount;
    }

    public Payment(int paymentID, int orderID, LocalDate paymentDate, String paymentMethod, double amount,
            String firstName, String lastName) {
        this.paymentID = paymentID;
        this.orderID = orderID;
        this.paymentDate = paymentDate;
        this.paymentMethod = paymentMethod;
        this.amount = amount;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    // Getters and Setters
    public int getPaymentID() {
        return paymentID;
    }

    public void setPaymentID(int paymentID) {
        this.paymentID = paymentID;
    }

    public int getOrderID() {
        return orderID;
    }

    public void setOrderID(int orderID) {
        this.orderID = orderID;
    }

    public LocalDate getPaymentDate() {
        return paymentDate;
    }

    public void setPaymentDate(LocalDate paymentDate) {
        this.paymentDate = paymentDate;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\OrdersSection.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.util.Callback;
import org.kordamp.ikonli.javafx.FontIcon;

import java.sql.*;
import java.util.Optional;

public class OrdersSection {
    private TableView<Order> ordersTableView;
    private VBox view;
    private OrderEditForm orderEditForm;
    private OrderAddForm orderAddForm;
    private ObservableList<Order> ordersData;
    

    public OrdersSection() {
        // Initialize forms
        orderEditForm = new OrderEditForm(this);
        orderAddForm = new OrderAddForm(this);
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Create the TableView
        ordersTableView = new TableView<>();
        ordersTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        ordersTableView.setPrefSize(750, 400);

        // Define columns
        TableColumn<Order, Integer> colOrderID = new TableColumn<>("Order ID");
        colOrderID.setCellValueFactory(new PropertyValueFactory<>("orderID"));

        TableColumn<Order, Date> colOrderDate = new TableColumn<>("Order Date");
        colOrderDate.setCellValueFactory(new PropertyValueFactory<>("orderDate"));

        TableColumn<Order, Integer> colCarID = new TableColumn<>("Car ID");
        colCarID.setCellValueFactory(new PropertyValueFactory<>("carID"));

        TableColumn<Order, Integer> colCustomerID = new TableColumn<>("Customer ID");
        colCustomerID.setCellValueFactory(new PropertyValueFactory<>("customerID"));

        TableColumn<Order, Integer> colEmployeeID = new TableColumn<>("Employee ID");
        colEmployeeID.setCellValueFactory(new PropertyValueFactory<>("employeeID"));

        TableColumn<Order, Integer> colQuantity = new TableColumn<>("Quantity");
        colQuantity.setCellValueFactory(new PropertyValueFactory<>("quantity"));

        TableColumn<Order, Double> colTotalPrice = new TableColumn<>("Total Price");
        colTotalPrice.setCellValueFactory(new PropertyValueFactory<>("totalPrice"));

        // Add Edit Icon Column
        TableColumn<Order, Void> colEdit = createEditColumn();


        // Add columns to the TableView
        ordersTableView.getColumns().addAll(colOrderID, colOrderDate, colCarID, colCustomerID,
                colEmployeeID, colQuantity, colTotalPrice, colEdit);
        ordersTableView.getColumns().forEach(column -> column.setReorderable(false));

        // Load data from the database
        ordersData = fetchOrdersData();
        FilteredList<Order> filteredData = new FilteredList<>(ordersData, p -> true);
        ordersTableView.setItems(filteredData);

        // Create search fields
        TextField txtOrderID = new TextField();
        txtOrderID.setPromptText("Order ID");

        TextField txtOrderDate = new TextField();
        txtOrderDate.setPromptText("Order Date");

        TextField txtCarID = new TextField();
        txtCarID.setPromptText("Car ID");

        TextField txtCustomerID = new TextField();
        txtCustomerID.setPromptText("Customer ID");

        TextField txtEmployeeID = new TextField();
        txtEmployeeID.setPromptText("Employee ID");

        TextField txtQuantity = new TextField();
        txtQuantity.setPromptText("Quantity");

        TextField txtTotalPrice = new TextField();
        txtTotalPrice.setPromptText("Total Price");

        // Add filtering logic
        txtOrderID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                order -> filterOrders(order, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                        txtQuantity, txtTotalPrice)));

        txtOrderDate.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                order -> filterOrders(order, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                        txtQuantity, txtTotalPrice)));

        txtCarID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                order -> filterOrders(order, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                        txtQuantity, txtTotalPrice)));

        txtCustomerID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                order -> filterOrders(order, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                        txtQuantity, txtTotalPrice)));

        txtEmployeeID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                order -> filterOrders(order, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                        txtQuantity, txtTotalPrice)));

        txtQuantity.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                order -> filterOrders(order, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                        txtQuantity, txtTotalPrice)));

        txtTotalPrice.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                order -> filterOrders(order, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                        txtQuantity, txtTotalPrice)));

        // Reset button to clear all text fields
        Button btnReset =ButtonFactory.createActionButton("Reset");
        btnReset.setOnAction(e -> {
            txtOrderID.clear();
            txtOrderDate.clear();
            txtCarID.clear();
            txtCustomerID.clear();
            txtEmployeeID.clear();
            txtQuantity.clear();
            txtTotalPrice.clear();
        });

        

        // Layout for search fields with label and reset button
        Label lblSearch = new Label("Search:");
        HBox searchFields = new HBox(15, lblSearch, txtOrderID, txtOrderDate, txtCarID, txtCustomerID, txtEmployeeID,
                txtQuantity, txtTotalPrice);
        searchFields.setAlignment(Pos.CENTER_LEFT);
        searchFields.setPadding(new Insets(5));

        // Add Buttons for Adding Orders
        Button btnAddOrder = ButtonFactory.createActionButton("Add Order");
        btnAddOrder.setOnAction(e -> {
            hideEditForm(); // Hide edit form if visible
            showAddForm();
        });

        HBox hboxButtons = new HBox(10, btnAddOrder, btnReset);
        hboxButtons.setAlignment(Pos.CENTER);
        hboxButtons.setPadding(new Insets(10));

        // Add everything to the main view
        view.getChildren().addAll(lblSearch, searchFields, hboxButtons, ordersTableView);
    }

    private TableColumn<Order, Void> createEditColumn() {
        TableColumn<Order, Void> colEdit = new TableColumn<>("Edit");
        colEdit.setCellFactory(param -> new TableCell<Order, Void>() {
            private final Button editButton = ButtonFactory.createEditButton();

            {
                FontIcon editIcon = new FontIcon("fas-edit");
                editIcon.setIconSize(16);
                editButton.setGraphic(editIcon);
                editButton.setOnAction(event -> {
                    Order order = getTableView().getItems().get(getIndex());
                    hideAddForm();
                    showEditForm(order);
                });
            }

            @Override
            public void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editButton);
                }
                setAlignment(Pos.CENTER);
            }
        });
        return colEdit;
    }

   

    private ObservableList<Order> fetchOrdersData() {
        ObservableList<Order> ordersList = FXCollections.observableArrayList();
        try (Connection conn = DatabaseConnection.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM orders")) {

            while (rs.next()) {
                ordersList.add(new Order(
                        rs.getInt("OrderID"),
                        rs.getDate("OrderDate"),
                        rs.getInt("CarID"),
                        rs.getInt("CustomerID"),
                        rs.getInt("EmployeeID"),
                        rs.getInt("Quantity"),
                        rs.getDouble("TotalPrice")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ordersList;
    }

    private boolean filterOrders(Order order, TextField txtOrderID, TextField txtOrderDate, TextField txtCarID,
            TextField txtCustomerID, TextField txtEmployeeID, TextField txtQuantity, TextField txtTotalPrice) {
        boolean matchesOrderID = txtOrderID.getText().isEmpty()
                || String.valueOf(order.getOrderID()).equals(txtOrderID.getText());
        boolean matchesOrderDate = txtOrderDate.getText().isEmpty()
                || order.getOrderDate().toString().contains(txtOrderDate.getText());
        boolean matchesCarID = txtCarID.getText().isEmpty()
                || String.valueOf(order.getCarID()).equals(txtCarID.getText());
        boolean matchesCustomerID = txtCustomerID.getText().isEmpty()
                || String.valueOf(order.getCustomerID()).equals(txtCustomerID.getText());
        boolean matchesEmployeeID = txtEmployeeID.getText().isEmpty()
                || String.valueOf(order.getEmployeeID()).equals(txtEmployeeID.getText());
        boolean matchesQuantity = txtQuantity.getText().isEmpty()
                || String.valueOf(order.getQuantity()).equals(txtQuantity.getText());
        boolean matchesTotalPrice = txtTotalPrice.getText().isEmpty()
                || String.valueOf(order.getTotalPrice()).equals(txtTotalPrice.getText());

        return matchesOrderID && matchesOrderDate && matchesCarID && matchesCustomerID && matchesEmployeeID &&
                matchesQuantity && matchesTotalPrice;
    }

    private void showEditForm(Order order) {
        orderEditForm.showEditForm(order);
        if (!view.getChildren().contains(orderEditForm.getForm())) {
            view.getChildren().add(orderEditForm.getForm());
        }
    }

    private void showAddForm() {
        orderAddForm.showAddForm();
        if (!view.getChildren().contains(orderAddForm.getForm())) {
            view.getChildren().add(orderAddForm.getForm());
        }
    }

    
    public void refreshData() {
        ordersData = fetchOrdersData();
        ordersTableView.setItems(ordersData);
    }
    public void reloadScene() {
        // Get the parent layout (CarShopGUI's main content)
        VBox parent = (VBox) view.getParent();
        if (parent != null) {
            OrdersSection refreshedOrdersSection = new OrdersSection();
            parent.getChildren().setAll(refreshedOrdersSection.getView());
        }
    }
    public void hideEditForm() {
        view.getChildren().remove(orderEditForm.getForm());
    }

    public void hideAddForm() {
        view.getChildren().remove(orderAddForm.getForm());
    }

    public VBox getView() {
        return view;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\OrderEditForm.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class OrderEditForm {
    private GridPane form;
    private DatePicker dpOrderDate;
    private ComboBox<Integer> cbCarID;
    private ComboBox<Integer> cbCustomerID;
    private ComboBox<Integer> cbEmployeeID;
    private TextField txtQuantity;
    private TextField txtTotalPrice;
    private Order currentOrder;
    private OrdersSection ordersSection;
    private Label messageLabel;

    public OrderEditForm(OrdersSection ordersSection) {
        this.ordersSection = ordersSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Labels and Controls
        Label lblOrderDate = new Label("Order Date:");
        dpOrderDate = new DatePicker();

        Label lblCarID = new Label("Car ID:");
        cbCarID = new ComboBox<>();
        populateComboBox(cbCarID, "SELECT CarID FROM Cars ORDER BY CarID ASC", "CarID");

        Label lblCustomerID = new Label("Customer ID:");
        cbCustomerID = new ComboBox<>();
        populateComboBox(cbCustomerID, "SELECT CustomerID FROM Customers ORDER BY CustomerID ASC", "CustomerID");

        Label lblEmployeeID = new Label("Employee ID:");
        cbEmployeeID = new ComboBox<>();
        populateComboBox(cbEmployeeID, "SELECT EmployeeID FROM Employees ORDER BY EmployeeID ASC", "EmployeeID");

        Label lblQuantity = new Label("Quantity:");
        txtQuantity = new TextField();

        Label lblTotalPrice = new Label("Total Price:");
        txtTotalPrice = new TextField();
        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
        
        addInputConstraints();

        form.add(lblOrderDate, 0, 0);
        form.add(dpOrderDate, 1, 0);
        form.add(lblCarID, 0, 1);
        form.add(cbCarID, 1, 1);
        form.add(lblCustomerID, 0, 2);
        form.add(cbCustomerID, 1, 2);
        form.add(lblEmployeeID, 0, 3);
        form.add(cbEmployeeID, 1, 3);
        form.add(lblQuantity, 0, 4);
        form.add(txtQuantity, 1, 4);
        form.add(lblTotalPrice, 0, 5);
        form.add(txtTotalPrice, 1, 5);
        form.add(messageLabel, 1, 6);

        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveOrder());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> ordersSection.hideEditForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);

        form.add(hboxButtons, 1, 7);
    }

    private void addInputConstraints() {
        txtQuantity.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtQuantity.setText(oldValue);
                messageLabel.setText("Quantity must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        txtTotalPrice.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtTotalPrice.setText(oldValue);
                messageLabel.setText("Total Price must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        dpOrderDate.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null && newValue.isAfter(java.time.LocalDate.now())) {
                dpOrderDate.setValue(oldValue);
                messageLabel.setText("Order Date must be today or in the past.");
            } else {
                messageLabel.setText("");
            }
        });
    }

    private void populateComboBox(ComboBox<Integer> comboBox, String sqlQuery, String columnName) {
        try {
            Connection conn = DatabaseConnection.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet resultSet = stmt.executeQuery(sqlQuery);
            List<Integer> items = new ArrayList<>();
            while (resultSet.next()) {
                items.add(resultSet.getInt(columnName));
            }
            ObservableList<Integer> observableList = FXCollections.observableArrayList(items);
            comboBox.setItems(observableList);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public GridPane getForm() {
        return form;
    }

    public void showEditForm(Order order) {
        this.currentOrder = order;
        dpOrderDate.setValue(order.getOrderDate().toLocalDate());
        cbCarID.setValue(order.getCarID());
        cbCustomerID.setValue(order.getCustomerID());
        cbEmployeeID.setValue(order.getEmployeeID());
        txtQuantity.setText(String.valueOf(order.getQuantity()));
        txtTotalPrice.setText(String.valueOf(order.getTotalPrice()));
    }

    private void saveOrder() {
        messageLabel.setText("");
        java.time.LocalDate orderDateValue = dpOrderDate.getValue();
        Integer carID = cbCarID.getValue();
        Integer customerID = cbCustomerID.getValue();
        Integer employeeID = cbEmployeeID.getValue();
        String quantityStr = txtQuantity.getText();
        String totalPriceStr = txtTotalPrice.getText();

        if (orderDateValue == null || carID == null || customerID == null || employeeID == null ||
                quantityStr.isEmpty() || totalPriceStr.isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }

        try {
            Date orderDate = Date.valueOf(orderDateValue);
            int quantity = Integer.parseInt(quantityStr);
            double totalPrice = Double.parseDouble(totalPriceStr);

            if (quantity <= 0 || totalPrice <= 0) {
                messageLabel.setText("Quantity and Total Price must be positive numbers.");
                return;
            }

            String sql = "UPDATE orders SET OrderDate = ?, CarID = ?, CustomerID = ?, EmployeeID = ?, Quantity = ?, TotalPrice = ? WHERE OrderID = ?";
            try (Connection conn = DatabaseConnection.getConnection();
                    PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setDate(1, orderDate);
                pstmt.setInt(2, carID);
                pstmt.setInt(3, customerID);
                pstmt.setInt(4, employeeID);
                pstmt.setInt(5, quantity);
                pstmt.setDouble(6, totalPrice);
                pstmt.setInt(7, currentOrder.getOrderID());

                pstmt.executeUpdate();
                messageLabel.setStyle("-fx-text-fill: green;");
                messageLabel.setText("Order updated successfully!");
                ordersSection.reloadScene();
            } catch (SQLException e) {
                e.printStackTrace();
                messageLabel.setText("Error updating order: " + e.getMessage());
                messageLabel.setStyle("-fx-text-fill: red;");
            }
        } catch (NumberFormatException e) {
            messageLabel.setText("Quantity and Total Price must be valid numbers.");
            messageLabel.setStyle("-fx-text-fill: red;");
            
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\OrderAddForm.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class OrderAddForm {
    private GridPane form;
    private DatePicker dpOrderDate;
    private ComboBox<Integer> cbCarID;
    private ComboBox<Integer> cbCustomerID;
    private ComboBox<Integer> cbEmployeeID;
    private TextField txtQuantity;
    private TextField txtTotalPrice;
    private OrdersSection ordersSection;
    private Label messageLabel; // Message label for displaying validation errors

    public OrderAddForm(OrdersSection ordersSection) {
        this.ordersSection = ordersSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Labels and Controls
        Label lblOrderDate = new Label("Order Date:");
        dpOrderDate = new DatePicker();

        Label lblCarID = new Label("Car ID:");
        cbCarID = new ComboBox<>();
        carids();

        Label lblCustomerID = new Label("Customer ID:");
        cbCustomerID = new ComboBox<>();
        customerid();

        Label lblEmployeeID = new Label("Employee ID:");
        cbEmployeeID = new ComboBox<>();
        employeeid();

        Label lblQuantity = new Label("Quantity:");
        txtQuantity = new TextField();

        Label lblTotalPrice = new Label("Total Price:");
        txtTotalPrice = new TextField();

        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");

        addInputConstraints();

        form.add(lblOrderDate, 0, 0);
        form.add(dpOrderDate, 1, 0);
        form.add(lblCarID, 0, 1);
        form.add(cbCarID, 1, 1);
        form.add(lblCustomerID, 0, 2);
        form.add(cbCustomerID, 1, 2);
        form.add(lblEmployeeID, 0, 3);
        form.add(cbEmployeeID, 1, 3);
        form.add(lblQuantity, 0, 4);
        form.add(txtQuantity, 1, 4);
        form.add(lblTotalPrice, 0, 5);
        form.add(txtTotalPrice, 1, 5);
        form.add(messageLabel, 1, 6);

        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveOrder());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> ordersSection.hideAddForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);

        form.add(hboxButtons, 1, 7);
    }

    private void addInputConstraints() {
        txtQuantity.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtQuantity.setText(oldValue);
                messageLabel.setText("Quantity must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        txtTotalPrice.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtTotalPrice.setText(oldValue);
                messageLabel.setText("Total Price must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        dpOrderDate.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null && newValue.isAfter(java.time.LocalDate.now())) {
                dpOrderDate.setValue(oldValue);
                messageLabel.setText("Order Date must be today or in the past.");
            } else {
                messageLabel.setText("");
            }
        }); 
    }

    private void carids() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            Statement stmt = conn.createStatement();
            String q2 = "SELECT CarID FROM Cars ORDER BY CarID ASC";
            ResultSet resultSet = stmt.executeQuery(q2);
            List<Integer> carIDs = new ArrayList<>();
            while (resultSet.next()) {
                carIDs.add(resultSet.getInt("CarID"));
            }
            ObservableList<Integer> observableList = FXCollections.observableArrayList(carIDs);
            cbCarID.setItems(observableList);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void customerid() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            Statement stmt = conn.createStatement();
            String q2 = "SELECT CustomerID FROM Customers ORDER BY CustomerID ASC";
            ResultSet resultSet = stmt.executeQuery(q2);
            List<Integer> customerIDs = new ArrayList<>();
            while (resultSet.next()) {
                customerIDs.add(resultSet.getInt("CustomerID"));
            }
            ObservableList<Integer> observableList = FXCollections.observableArrayList(customerIDs);
            cbCustomerID.setItems(observableList);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void employeeid() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            Statement stmt = conn.createStatement();
            String q2 = "SELECT EmployeeID FROM Employees ORDER BY EmployeeID ASC";
            ResultSet resultSet = stmt.executeQuery(q2);
            List<Integer> employeeIDs = new ArrayList<>();
            while (resultSet.next()) {
                employeeIDs.add(resultSet.getInt("EmployeeID"));
            }
            ObservableList<Integer> observableList = FXCollections.observableArrayList(employeeIDs);
            cbEmployeeID.setItems(observableList);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void saveOrder() {
        java.time.LocalDate orderDateValue = dpOrderDate.getValue();
        Integer carID = cbCarID.getValue();
        Integer customerID = cbCustomerID.getValue();
        Integer employeeID = cbEmployeeID.getValue();
        String quantityStr = txtQuantity.getText();
        String totalPriceStr = txtTotalPrice.getText();

        if (orderDateValue == null || carID == null || customerID == null || employeeID == null || quantityStr.isEmpty() || totalPriceStr.isEmpty()) {
            messageLabel.setText("All fields are required and must be valid.");
            return;
        }

        int quantity;
        double totalPrice;
        try {
            quantity = Integer.parseInt(quantityStr);
            totalPrice = Double.parseDouble(totalPriceStr);
        } catch (NumberFormatException e) {
            messageLabel.setText("Quantity and Total Price must be valid numbers.");
            return;
        }

        if (quantity <= 0 || totalPrice <= 0) {
            messageLabel.setText("Quantity and Total Price must be positive values.");
            return;
        }

        try {
            Date orderDate = Date.valueOf(orderDateValue);
            String sql = "INSERT INTO orders (OrderDate, CarID, CustomerID, EmployeeID, Quantity, TotalPrice) VALUES (?, ?, ?, ?, ?, ?)";
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setDate(1, orderDate);
                pstmt.setInt(2, carID);
                pstmt.setInt(3, customerID);
                pstmt.setInt(4, employeeID);
                pstmt.setInt(5, quantity);
                pstmt.setDouble(6, totalPrice);

                pstmt.executeUpdate();
                
                messageLabel.setText("Order saved successfully.");
                messageLabel.setStyle("-fx-text-fill: green;");
                clearFields();
                ordersSection.reloadScene();
            } catch (SQLException e) {
                e.printStackTrace();
                messageLabel.setText("Error saving order: " + e.getMessage());
                messageLabel.setStyle("-fx-text-fill: red;");
            }
        } catch (Exception e) {
            messageLabel.setText("An error occurred: " + e.getMessage());
            messageLabel.setStyle("-fx-text-fill: red;");
        }
    }
    private void clearFields() {
        dpOrderDate.setValue(null);
        cbCarID.getSelectionModel().clearSelection();
        cbCustomerID.getSelectionModel().clearSelection();
        cbEmployeeID.getSelectionModel().clearSelection();
        txtQuantity.clear();
        txtTotalPrice.clear();
    }
    public GridPane getForm() {
        return form;
    }

    public void showAddForm() {
        dpOrderDate.setValue(null);
        cbCarID.getSelectionModel().clearSelection();
        cbCustomerID.getSelectionModel().clearSelection();
        cbEmployeeID.getSelectionModel().clearSelection();
        txtQuantity.clear();
        txtTotalPrice.clear();
        messageLabel.setText("");
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Order.java
```
package com.example;

import java.sql.Date;

public class Order {
    private int orderID;
    private Date orderDate;
    private int carID;
    private int customerID;
    private int employeeID;
    private int quantity;
    private double totalPrice;

    // Constructor
    public Order(int orderID, Date orderDate, int carID, int customerID, int employeeID, int quantity, double totalPrice) {
        this.orderID = orderID;
        this.orderDate = orderDate;
        this.carID = carID;
        this.customerID = customerID;
        this.employeeID = employeeID;
        this.quantity = quantity;
        this.totalPrice = totalPrice;
    }

    public Order(int int1, Date date, int int2, int string, int string2, String int3, String int4, int int5,
            double double1) {
        //TODO Auto-generated constructor stub
    }

    // Getters and Setters
    public int getOrderID() {
        return orderID;
    }

    public Date getOrderDate() {
        return orderDate;
    }

    public int getCarID() {
        return carID;
    }

    public int getCustomerID() {
        return customerID;
    }

    public int getEmployeeID() {
        return employeeID;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    // Setters
    public void setOrderID(int orderID) {
        this.orderID = orderID;
    }

    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }

    public void setCarID(int carID) {
        this.carID = carID;
    }

    public void setCustomerID(int customerID) {
        this.customerID = customerID;
    }

    public void setEmployeeID(int employeeID) {
        this.employeeID = employeeID;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public void setTotalPrice(double totalPrice) {
        this.totalPrice = totalPrice;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\MonthlyService.java
```
package com.example;

public class MonthlyService {
    private String date;
    private String serviceDescription;
    private int serviceCount;

    public MonthlyService(String date, String serviceDescription, int serviceCount) {
        this.date = date;
        this.serviceDescription = serviceDescription;
        this.serviceCount = serviceCount;
    }

    public String getDate() {
        return date;
    }

    public String getServiceDescription() {
        return serviceDescription;
    }

    public int getServiceCount() {
        return serviceCount;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\LoginSignupApp.java
```
package com.example;

import javafx.animation.FadeTransition;
import javafx.animation.SequentialTransition;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.LinearGradient;
import javafx.scene.paint.Stop;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.sql.*;
import java.util.prefs.Preferences;

public class LoginSignupApp extends Application {
    private Stage stage;
    private Scene getStartedScene, signUpScene, signInScene;
    private Connection connection;
    private Preferences preferences;
    private String loggedInUsername; 

    @Override
    public void start(Stage primaryStage) {
        this.stage = primaryStage;
        preferences = Preferences.userNodeForPackage(LoginSignupApp.class);
    
        initializeDBConnection();
    
        getStartedScene = createGetStartedScene();
        signUpScene = createSignUpScene();
        signInScene = createSignInScene();
    
        // Set initial scene
        stage.setScene(getStartedScene);
        stage.setTitle("Animated Login and Signup");
        stage.show();
    }
    
    

    private void initializeDBConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/car", "root", "");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Apply Fade and Slide Animations
    private void applyAnimations(Pane root) {
        root.setOpacity(0);
        FadeTransition fade = new FadeTransition(Duration.seconds(1), root);
        fade.setFromValue(0);
        fade.setToValue(1);

        TranslateTransition slide = new TranslateTransition(Duration.seconds(1), root);
        slide.setFromY(50);
        slide.setToY(0);

        fade.play();
        slide.play();
    }

    // Create Get Started Scene
    private Scene createGetStartedScene() {
        // Base layout with cool blue gradient background
        VBox layout = new VBox(20);
        layout.setAlignment(Pos.CENTER);
        layout.setPadding(new Insets(30));
        layout.setStyle("-fx-background-color: linear-gradient(to bottom, #0F2027, #203A43, #2C5364);");

        // Create shadowed container box
        Rectangle shadowBox = new Rectangle(500, 450);
        shadowBox.setArcWidth(25);
        shadowBox.setArcHeight(25);
        shadowBox.setFill(new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.web("#E0F7FA")), // Light Cyan
                new Stop(1, Color.web("#B2EBF2")))); // Sky Blue
        shadowBox.setEffect(new javafx.scene.effect.DropShadow(20, Color.web("#0F2027"))); // Shadow color

        // Animated Title
        Label title = new Label("Get Started");
        title.setFont(Font.font("Arial", 48));
        title.setTextFill(Color.web("#0D47A1")); // Navy Blue
        applyZigzagAnimation(title);

        // Subtitle
        Label subtitle = new Label("Start with sign up or sign in");
        subtitle.setFont(Font.font("Arial", 18));
        subtitle.setTextFill(Color.web("#455A64")); // Cool Grey

        // Buttons with cool blue gradient
        Button signUpButton = createGradientButton("SIGN UP", e -> switchScene(signUpScene));
        Button signInButton = createGradientButton("SIGN IN", e -> switchScene(signInScene));

        // Copyright Label
        Label copyrightLabel = new Label("© 2024 Kareem Abuayyash. All rights reserved.");
        copyrightLabel.setTextFill(Color.web("#90A4AE")); // Light Grey
        copyrightLabel.setFont(Font.font("Arial", 12));

        // Content inside shadow box
        VBox contentBox = new VBox(20, title, subtitle, signUpButton, signInButton, copyrightLabel);
        contentBox.setAlignment(Pos.CENTER);

        // StackPane to layer shadow box and content
        StackPane centeredBox = new StackPane();
        centeredBox.getChildren().addAll(shadowBox, contentBox);

        // Add the centered box to the base layout
        layout.getChildren().add(centeredBox);

        applyAnimations(layout);

        return new Scene(layout, 1550, 800);
    }

    private Button createGradientButton(String text, EventHandler<javafx.event.ActionEvent> action) {
        Button button = new Button(text);
        button.setOnAction(action);
        button.setPrefSize(300, 50);
        button.setStyle("-fx-background-color: linear-gradient(to right, #1E88E5, #0D47A1); "
                + "-fx-text-fill: white; -fx-font-size: 16; -fx-font-weight: bold;"
                + "-fx-background-radius: 25; -fx-border-color: transparent;");
        button.setOnMouseEntered(
                e -> button.setStyle("-fx-background-color: linear-gradient(to right, #42A5F5, #1E88E5); "
                        + "-fx-text-fill: white; -fx-font-size: 16; -fx-font-weight: bold;"
                        + "-fx-background-radius: 25; -fx-border-color: transparent;"));
        button.setOnMouseExited(
                e -> button.setStyle("-fx-background-color: linear-gradient(to right, #1E88E5, #0D47A1); "
                        + "-fx-text-fill: white; -fx-font-size: 16; -fx-font-weight: bold;"
                        + "-fx-background-radius: 25; -fx-border-color: transparent;"));
        return button;
    }

    // Create Sign Up Scene
    private Scene createSignUpScene() {
        VBox layout = new VBox(20);
        layout.setAlignment(Pos.CENTER);
        layout.setPadding(Insets.EMPTY); // Remove extra padding

        layout.setStyle("-fx-background-color: linear-gradient(to bottom, #0F2027, #203A43, #2C5364);");
    
        Rectangle shadowBox = new Rectangle(500, 450);
        shadowBox.setArcWidth(25);
        shadowBox.setArcHeight(25);
        shadowBox.setFill(new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.web("#E0F7FA")),
                new Stop(1, Color.web("#B2EBF2"))));
        shadowBox.setEffect(new javafx.scene.effect.DropShadow(20, Color.web("#0F2027")));
    
        Label title = new Label("Sign Up");
        title.setFont(Font.font("Arial", 48));
        title.setTextFill(Color.web("#0D47A1"));
        applyZigzagAnimation(title);
    
        Label subtitle = new Label("Create a new account");
        subtitle.setFont(Font.font("Arial", 18));
        subtitle.setTextFill(Color.web("#455A64"));
    
        TextField usernameField = createInputField("Username");
        Label usernameErrorLabel = new Label();
        usernameErrorLabel.setTextFill(Color.RED);
    
        PasswordField passwordField = createPasswordField("Password");
        Label passwordErrorLabel = new Label();
        passwordErrorLabel.setTextFill(Color.RED);
    
        PasswordField confirmPasswordField = createPasswordField("Confirm Password");
        Label confirmPasswordErrorLabel = new Label();
        confirmPasswordErrorLabel.setTextFill(Color.RED);
    
        Button signUpButton = createGradientButton("SIGN UP", e -> {
            boolean isValid = true;
    
            // Validate username
            if (usernameField.getText().trim().isEmpty()) {
                usernameErrorLabel.setText("Username cannot be empty.");
                isValid = false;
            } else {
                usernameErrorLabel.setText("");
            }
    
            // Validate password
            if (passwordField.getText().trim().isEmpty()) {
                passwordErrorLabel.setText("Password cannot be empty.");
                isValid = false;
            } else {
                passwordErrorLabel.setText("");
            }
    
            // Validate confirm password
            if (!passwordField.getText().equals(confirmPasswordField.getText())) {
                confirmPasswordErrorLabel.setText("Passwords do not match.");
                isValid = false;
            } else {
                confirmPasswordErrorLabel.setText("");
            }
    
            // Register user if valid
            if (isValid) {
                if (registerUser(usernameField.getText(), passwordField.getText())) {
                    switchScene(signInScene);
                } else {
                    usernameErrorLabel.setText("Signup failed. User already exists.");
                }
            }
        });
    
        Hyperlink goToSignIn = new Hyperlink("You already have an account? Sign in");
        goToSignIn.setTextFill(Color.web("#90A4AE"));
        goToSignIn.setOnAction(e -> switchScene(signInScene));
    
        VBox contentBox = new VBox(10, title, subtitle, 
                usernameField, usernameErrorLabel, 
                passwordField, passwordErrorLabel, 
                confirmPasswordField, confirmPasswordErrorLabel, 
                signUpButton, goToSignIn);
    
        contentBox.setAlignment(Pos.CENTER);
    
        StackPane centeredBox = new StackPane();
        centeredBox.getChildren().addAll(shadowBox, contentBox);
    
        layout.getChildren().add(centeredBox);
    
        applyAnimations(layout);
    
        return new Scene(layout, 1550, 800);
    }
    

    private boolean registerUser(String username, String password) {
        String query = "INSERT INTO user_account (username, password) VALUES (?, ?)";
        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            ps.setString(2, password);
            ps.executeUpdate();
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Create Sign In Scene
    private Scene createSignInScene() {
        VBox layout = new VBox(20);
        layout.setAlignment(Pos.CENTER);
        layout.setPadding(new Insets(30));
        layout.setStyle("-fx-background-color: linear-gradient(to bottom, #0F2027, #203A43, #2C5364);");
    
        Rectangle shadowBox = new Rectangle(500, 450);
        shadowBox.setArcWidth(25);
        shadowBox.setArcHeight(25);
        shadowBox.setFill(new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.web("#E0F7FA")),
                new Stop(1, Color.web("#B2EBF2"))));
        shadowBox.setEffect(new javafx.scene.effect.DropShadow(20, Color.web("#0F2027")));
    
        Label title = new Label("Sign In");
        title.setFont(Font.font("Arial", 48));
        title.setTextFill(Color.web("#0D47A1"));
        applyZigzagAnimation(title);
    
        Label subtitle = new Label("Welcome back!");
        subtitle.setFont(Font.font("Arial", 18));
        subtitle.setTextFill(Color.web("#455A64"));
    
        TextField usernameField = createInputField("Username");
        PasswordField passwordField = createPasswordField("Password");
    
        // Pre-fill saved credentials
        String savedUsername = preferences.get("username", "");
        String savedPassword = preferences.get("password", "");
        if (!savedUsername.isEmpty() && !savedPassword.isEmpty()) {
            usernameField.setText(savedUsername);
            passwordField.setText(savedPassword);
        }
    
        Label usernameErrorLabel = new Label();
        usernameErrorLabel.setTextFill(Color.RED);
        Label passwordErrorLabel = new Label();
        passwordErrorLabel.setTextFill(Color.RED);
    
        // Remember Me CheckBox
        CheckBox rememberMeCheckBox = new CheckBox("Remember Me");
        rememberMeCheckBox.setTextFill(Color.web("#90A4AE"));
        rememberMeCheckBox.setSelected(!savedUsername.isEmpty() && !savedPassword.isEmpty());
    
        Button signInButton = createGradientButton("SIGN IN", e -> {
            boolean isValid = true;
    
            // Validate username
            if (usernameField.getText().trim().isEmpty()) {
                usernameErrorLabel.setText("Username cannot be empty.");
                isValid = false;
            } else {
                usernameErrorLabel.setText("");
            }
    
            // Validate password
            if (passwordField.getText().trim().isEmpty()) {
                passwordErrorLabel.setText("Password cannot be empty.");
                isValid = false;
            } else {
                passwordErrorLabel.setText("");
            }
    
            // Authenticate if valid
            if (isValid) {
                if (validateLogin(usernameField.getText(), passwordField.getText())) {
                    // Save credentials if Remember Me is selected
                    if (rememberMeCheckBox.isSelected()) {
                        preferences.put("username", usernameField.getText());
                        preferences.put("password", passwordField.getText());
                    } else {
                        preferences.remove("username");
                        preferences.remove("password");
                    }
                    openCarShopGUI();
                } else {
                    usernameErrorLabel.setText("Invalid username or password.");
                }
            }
        });
    
        Hyperlink goToSignUp = new Hyperlink("Don’t have an account? Sign up");
        goToSignUp.setTextFill(Color.web("#90A4AE"));
        goToSignUp.setOnAction(e -> switchScene(signUpScene));
    
        VBox contentBox = new VBox(10, title, subtitle, 
                usernameField, usernameErrorLabel, 
                passwordField, passwordErrorLabel, 
                rememberMeCheckBox, 
                signInButton, goToSignUp);
    
        contentBox.setAlignment(Pos.CENTER);
    
        StackPane centeredBox = new StackPane();
        centeredBox.getChildren().addAll(shadowBox, contentBox);
    
        layout.getChildren().add(centeredBox);
    
        applyAnimations(layout);
    
        return new Scene(layout, 1550, 800);
    }
    
    

    // Declare this at the class level
    private boolean rememberMeSelected = false;

    private void openCarShopGUI() {
        CarShopGUI carShopGUI = new CarShopGUI(loggedInUsername); // Pass the username
        try {
            Stage carShopStage = new Stage();
            carShopGUI.start(carShopStage);
            carShopStage.setMaximized(true); // Open CarShopGUI maximized
            stage.close(); // Close current login window
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private boolean validateLogin(String username, String password) {
        String query = "SELECT * FROM user_account WHERE username = ? AND password = ?";
        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    loggedInUsername = username; // Set the logged-in username
    
                    // Save credentials if Remember Me is selected
                    if (rememberMeSelected) {
                        preferences.put("username", username);
                        preferences.put("password", password);
                    } else {
                        preferences.remove("username");
                        preferences.remove("password");
                    }
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
    

    // Scene Switching Helper
    private void switchScene(Scene newScene) {
        System.out.println("Switching to new scene...");
        applyAnimations((Pane) newScene.getRoot());
        stage.setScene(newScene);
    }

    // Create Base Layout
    // Create Base Layout
    private VBox createBaseLayout(String title, String subtitle) {
        VBox layout = new VBox(20); // Main layout with spacing
        layout.setPadding(new Insets(30));
        layout.setAlignment(Pos.CENTER);
        layout.setStyle("-fx-background-color: linear-gradient(to bottom, #20003A, #5B0B4E, #F4A1A5);");

        // Title Label with Animation
        Label titleLabel = new Label(title);
        titleLabel.setFont(Font.font(48));
        titleLabel.setTextFill(Color.WHITE);
        applyZigzagAnimation(titleLabel); // Optional animation for title

        // Subtitle Label
        Label subtitleLabel = new Label(subtitle);
        subtitleLabel.setFont(Font.font(18));
        subtitleLabel.setTextFill(Color.LIGHTGRAY);

        // Copyright Label
        Label copyrightLabel = new Label("© 2024 Kareem Abuayyash. All rights reserved.");
        copyrightLabel.setTextFill(Color.BLACK);
        copyrightLabel.setFont(Font.font(12));

        // Add elements in proper order
        layout.getChildren().addAll(titleLabel, subtitleLabel); // Title & subtitle first
        layout.setAlignment(Pos.CENTER);

        return layout;
    }

    private void applyZigzagAnimation(Label label) {
        // Horizontal Movement
        TranslateTransition moveRight = new TranslateTransition(Duration.seconds(0.5), label);
        moveRight.setFromX(0);
        moveRight.setToX(30);
        moveRight.setAutoReverse(true);
        moveRight.setCycleCount(2);

        // Vertical Movement
        TranslateTransition moveDown = new TranslateTransition(Duration.seconds(0.5), label);
        moveDown.setFromY(0);
        moveDown.setToY(20);
        moveDown.setAutoReverse(true);
        moveDown.setCycleCount(2);

        // Combine Animations in Sequence
        SequentialTransition zigzag = new SequentialTransition(moveRight, moveDown);
        zigzag.setCycleCount(TranslateTransition.INDEFINITE); // Repeat forever
        zigzag.play();
    }

    // Create Buttons
    private Button createButton(String text, EventHandler<javafx.event.ActionEvent> action) {
        Button button = new Button(text);
        button.setOnAction(action);
        button.setPrefSize(300, 50);
        button.setStyle("-fx-background-color: linear-gradient(to right, #A4508B, #5B0B4E); "
                + "-fx-text-fill: white; -fx-font-size: 16; -fx-font-weight: bold;"
                + "-fx-background-radius: 25; -fx-border-color: transparent;");
        button.setOnMouseEntered(
                e -> button.setStyle("-fx-background-color: linear-gradient(to right, #B56DA8, #6A0572); "
                        + "-fx-text-fill: white; -fx-font-size: 16; -fx-font-weight: bold;"
                        + "-fx-background-radius: 25; -fx-border-color: transparent;"));
        button.setOnMouseExited(
                e -> button.setStyle("-fx-background-color: linear-gradient(to right, #A4508B, #5B0B4E); "
                        + "-fx-text-fill: white; -fx-font-size: 16; -fx-font-weight: bold;"
                        + "-fx-background-radius: 25; -fx-border-color: transparent;"));
        return button;
    }

    // Create Input Fields
    private TextField createInputField(String placeholder) {
        TextField field = new TextField();
        field.setPromptText(placeholder);
        styleInputField(field);
        return field;
    }

    private PasswordField createPasswordField(String placeholder) {
        PasswordField field = new PasswordField();
        field.setPromptText(placeholder);
        styleInputField(field);
        return field;
    }

    private void styleInputField(TextField field) {
        field.setPrefSize(350, 40); // Make the input fields smaller
        field.setMaxWidth(350); // Set a fixed max width
        field.setAlignment(Pos.CENTER); // Center text within the field
        field.setStyle("-fx-background-color: rgba(255, 255, 255, 0.9); "
                + "-fx-background-radius: 20; -fx-border-color: transparent; -fx-font-size: 14;");
    }

    // Create Links
    private Hyperlink createLink(String text, Scene targetScene) {
        Hyperlink link = new Hyperlink(text);
        link.setTextFill(Color.LIGHTGRAY);
        link.setOnAction(e -> {
            if (targetScene != null) {
                switchScene(targetScene);
            }
        });
        return link;
    }

    public static void main(String[] args) {
        launch(args);
    }
}


```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\HomePage.java
```

package com.example;
import javax.swing.*;

public class HomePage extends JFrame {
    public HomePage() {
        setTitle("Home Page");
        setSize(300, 150);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JLabel welcomeLabel = new JLabel("Welcome to the Home Page!", SwingConstants.CENTER);
        add(welcomeLabel);

        setVisible(true);
    }
}
```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\EmployeeSection.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.util.Callback;
import org.kordamp.ikonli.javafx.FontIcon;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class EmployeeSection {
    private TableView<Employee> employeeTableView;
    private VBox view;
    private EmployeeEditForm employeeEditForm;
    private EmployeeAddForm employeeAddForm;
    private ObservableList<Employee> employeeData;

    public EmployeeSection() {
        // Initialize forms
        employeeEditForm = new EmployeeEditForm(this);
        employeeAddForm = new EmployeeAddForm(this);
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Create the TableView
        employeeTableView = new TableView<>();
        employeeTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        employeeTableView.setPrefSize(750, 400);

        // Define columns
        TableColumn<Employee, Integer> colEmployeeID = new TableColumn<>("Employee ID");
        colEmployeeID.setCellValueFactory(new PropertyValueFactory<>("employeeID"));

        TableColumn<Employee, String> colFirstName = new TableColumn<>("First Name");
        colFirstName.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        TableColumn<Employee, String> colLastName = new TableColumn<>("Last Name");
        colLastName.setCellValueFactory(new PropertyValueFactory<>("lastName"));

        TableColumn<Employee, String> colPosition = new TableColumn<>("Position");
        colPosition.setCellValueFactory(new PropertyValueFactory<>("position"));

        TableColumn<Employee, Double> colSalary = new TableColumn<>("Salary");
        colSalary.setCellValueFactory(new PropertyValueFactory<>("salary"));

        TableColumn<Employee, Date> colHireDate = new TableColumn<>("Hire Date");
        colHireDate.setCellValueFactory(new PropertyValueFactory<>("hireDate"));

        // Add Edit Icon Column
        TableColumn<Employee, Void> colEdit = createEditColumn();

        // Add columns to the TableView
        employeeTableView.getColumns().addAll(colEmployeeID, colFirstName, colLastName, colPosition, colSalary, colHireDate, colEdit);
        employeeTableView.getColumns().forEach(column -> column.setReorderable(false));


        // Load data from the database
        employeeData = fetchEmployeeData();
        FilteredList<Employee> filteredData = new FilteredList<>(employeeData, p -> true);
        employeeTableView.setItems(filteredData);

        // Create search fields
        TextField txtEmployeeID = new TextField();
        txtEmployeeID.setPromptText("Employee ID");

        TextField txtFirstName = new TextField();
        txtFirstName.setPromptText("First Name");

        TextField txtLastName = new TextField();
        txtLastName.setPromptText("Last Name");

        TextField txtPosition = new TextField();
        txtPosition.setPromptText("Position");

        TextField txtSalary = new TextField();
        txtSalary.setPromptText("Salary");

        TextField txtHireDate = new TextField();
        txtHireDate.setPromptText("Hire Date");

        // Add filtering logic
        txtEmployeeID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                employee -> filterEmployees(employee, txtEmployeeID, txtFirstName, txtLastName, txtPosition, txtSalary, txtHireDate)));

        txtFirstName.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                employee -> filterEmployees(employee, txtEmployeeID, txtFirstName, txtLastName, txtPosition, txtSalary, txtHireDate)));

        txtLastName.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                employee -> filterEmployees(employee, txtEmployeeID, txtFirstName, txtLastName, txtPosition, txtSalary, txtHireDate)));

        txtPosition.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                employee -> filterEmployees(employee, txtEmployeeID, txtFirstName, txtLastName, txtPosition, txtSalary, txtHireDate)));

        txtSalary.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                employee -> filterEmployees(employee, txtEmployeeID, txtFirstName, txtLastName, txtPosition, txtSalary, txtHireDate)));

        txtHireDate.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                employee -> filterEmployees(employee, txtEmployeeID, txtFirstName, txtLastName, txtPosition, txtSalary, txtHireDate)));

        // Reset button to clear all text fields
        Button btnReset = ButtonFactory.createActionButton("Reset");
        btnReset.setOnAction(e -> {
            txtEmployeeID.clear();
            txtFirstName.clear();
            txtLastName.clear();
            txtPosition.clear();
            txtSalary.clear();
            txtHireDate.clear();
        });

        

        // Layout for search fields with label and reset button
        Label lblSearch = new Label("Search:");
        HBox searchFields = new HBox(15, lblSearch, txtEmployeeID, txtFirstName, txtLastName, txtPosition, txtSalary, txtHireDate);
        searchFields.setAlignment(Pos.CENTER_LEFT);
        searchFields.setPadding(new Insets(5));

        // Add Buttons for Adding Employees
        Button btnAddEmployee = ButtonFactory.createActionButton("Add Employee");
        btnAddEmployee.setOnAction(e -> {
            hideEditForm(); // Hide edit form if visible
            showAddForm();
        });

        HBox hboxButtons = new HBox(10, btnAddEmployee, btnReset);
        hboxButtons.setAlignment(Pos.CENTER);
        hboxButtons.setPadding(new Insets(10));

        // Add everything to the main view
        view.getChildren().addAll(lblSearch, searchFields, hboxButtons, employeeTableView);
    }

    private TableColumn<Employee, Void> createEditColumn() {
        TableColumn<Employee, Void> colEdit = new TableColumn<>("Edit");
        colEdit.setCellFactory(param -> new TableCell<Employee, Void>() {
            private final Button editButton = ButtonFactory.createEditButton();

            {
                FontIcon editIcon = new FontIcon("fas-edit");
                editIcon.setIconSize(16);
                editButton.setGraphic(editIcon);
                editButton.setOnAction(event -> {
                    Employee employee = getTableView().getItems().get(getIndex());
                    hideAddForm(); // Hide the Add Form when Edit is clicked
                    showEditForm(employee);
                });
            }

            @Override
            public void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editButton);
                }
                setAlignment(Pos.CENTER);
            }
        });
        return colEdit;
    }

   

    private ObservableList<Employee> fetchEmployeeData() {
        ObservableList<Employee> employeeList = FXCollections.observableArrayList();
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM Employees")) {

            while (rs.next()) {
                employeeList.add(new Employee(
                        rs.getInt("EmployeeID"),
                        rs.getString("FirstName"),
                        rs.getString("LastName"),
                        rs.getString("Position"),
                        rs.getDouble("Salary"),
                        rs.getDate("HireDate")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return employeeList;
    }

    private boolean filterEmployees(Employee employee, TextField txtEmployeeID, TextField txtFirstName, TextField txtLastName,
                                    TextField txtPosition, TextField txtSalary, TextField txtHireDate) {
        boolean matchesEmployeeID = txtEmployeeID.getText().isEmpty()
                || String.valueOf(employee.getEmployeeID()).equals(txtEmployeeID.getText());
        boolean matchesFirstName = txtFirstName.getText().isEmpty()
                || employee.getFirstName().toLowerCase().contains(txtFirstName.getText().toLowerCase());
        boolean matchesLastName = txtLastName.getText().isEmpty()
                || employee.getLastName().toLowerCase().contains(txtLastName.getText().toLowerCase());
        boolean matchesPosition = txtPosition.getText().isEmpty()
                || employee.getPosition().toLowerCase().contains(txtPosition.getText().toLowerCase());
        boolean matchesSalary = txtSalary.getText().isEmpty()
                || String.valueOf(employee.getSalary()).contains(txtSalary.getText());
        boolean matchesHireDate = txtHireDate.getText().isEmpty()
                || employee.getHireDate().toString().toLowerCase().contains(txtHireDate.getText().toLowerCase());

        return matchesEmployeeID && matchesFirstName && matchesLastName && matchesPosition && matchesSalary && matchesHireDate;
    }

    private void showEditForm(Employee employee) {
        employeeEditForm.showEditForm(employee);
        if (!view.getChildren().contains(employeeEditForm.getForm())) {
            view.getChildren().add(employeeEditForm.getForm());
        }
    }

    private void showAddForm() {
        employeeAddForm.showAddForm();
        if (!view.getChildren().contains(employeeAddForm.getForm())) {
            view.getChildren().add(employeeAddForm.getForm());
        }
    }

   
    public void refreshData() {
        employeeData = fetchEmployeeData();
        employeeTableView.setItems(employeeData);
    }
    public void reloadScene() {
        // Get the parent layout (CarShopGUI's main content)
        VBox parent = (VBox) view.getParent();
        if (parent != null) {
            EmployeeSection refreshedEmplyeeSection = new EmployeeSection();
            parent.getChildren().setAll(refreshedEmplyeeSection.getView());
        }
    }
    public void hideEditForm() {
        view.getChildren().remove(employeeEditForm.getForm());
    }

    public void hideAddForm() {
        view.getChildren().remove(employeeAddForm.getForm());
    }

    public VBox getView() {
        return view;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\EmployeeEditForm.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class EmployeeEditForm {
    private GridPane form;
    private TextField txtFirstName;
    private TextField txtLastName;
    private TextField txtPosition;
    private TextField txtSalary;
    private DatePicker txtHireDate;
    private Employee currentEmployee;
    private EmployeeSection employeeSection;    
    private Label messageLabel; // Validation message display


    public EmployeeEditForm(EmployeeSection employeeSection) {
        this.employeeSection = employeeSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Labels and TextFields
        Label lblFirstName = new Label("First Name:");
        txtFirstName = new TextField();
        Label lblLastName = new Label("Last Name:");
        txtLastName = new TextField();
        Label lblPosition = new Label("Position:");
        txtPosition = new TextField();
        Label lblSalary = new Label("Salary:");
        txtSalary = new TextField();
        Label lblHireDate = new Label("Hire Date:");
        txtHireDate = new DatePicker();
        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
        addInputConstraints();
        form.add(lblFirstName, 0, 0);
        form.add(txtFirstName, 1, 0);
        form.add(lblLastName, 0, 1);
        form.add(txtLastName, 1, 1);
        form.add(lblPosition, 0, 2);
        form.add(txtPosition, 1, 2);
        form.add(lblSalary, 0, 3);
        form.add(txtSalary, 1, 3);
        form.add(lblHireDate, 0, 4);
        form.add(txtHireDate, 1, 4);
        form.add(messageLabel, 1, 5);

        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveEmployee());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> employeeSection.hideEditForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);

        form.add(hboxButtons, 1, 6);
       

    }
    private void addInputConstraints() {
        // First Name: Letters only
        txtFirstName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z]*")) {
                txtFirstName.setText(oldValue);
                messageLabel.setText("First Name must contain only letter.");
            } else {
                messageLabel.setText("");
            }
        });

        // Last Name: Letters only
        txtLastName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z]*")) {
                txtLastName.setText(oldValue);
                messageLabel.setText("Last Name must contain only letters.");
            } else {
                messageLabel.setText("");
            }
        });

        //make position letters only and spaces
        txtPosition.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z\\s]*")) {
                txtPosition.setText(oldValue);
                messageLabel.setText("Position must contain only letters and spaces.");
            } else {
                messageLabel.setText("");
            }
            });

        txtSalary.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtSalary.setText(oldValue);
                messageLabel.setText("Salary must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });
        txtHireDate.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == null) {
                messageLabel.setText("Hire Date is required.");
            } else {
                messageLabel.setText("");
            }
        });
       
    }

    public GridPane getForm() {
        return form;
    }

    public void showEditForm(Employee employee) {
        this.currentEmployee = employee;
        txtFirstName.setText(employee.getFirstName());
        txtLastName.setText(employee.getLastName());
        txtPosition.setText(employee.getPosition()); 
        txtSalary.setText(String.valueOf(employee.getSalary()));
        txtHireDate.setValue(employee.getHireDate().toLocalDate());
    }

    private void saveEmployee() {
        messageLabel.setText("");
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String position = txtPosition.getText();
        String salaryStr = txtSalary.getText();
        String hireDateStr = txtHireDate.getValue() != null ? txtHireDate.getValue().toString() : "";

        if (firstName.isEmpty() || lastName.isEmpty() || position.isEmpty() || salaryStr.isEmpty() || hireDateStr.isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }
        currentEmployee.setFirstName(txtFirstName.getText());
        currentEmployee.setLastName(txtLastName.getText());
        currentEmployee.setPosition(txtPosition.getText());
        currentEmployee.setSalary(Double.parseDouble(txtSalary.getText()));
        currentEmployee.setHireDate(Date.valueOf(txtHireDate.getValue()));

        String sql = "UPDATE employees SET FirstName = ?, LastName = ?, Position = ?, Salary = ?, HireDate = ? WHERE EmployeeID = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, currentEmployee.getFirstName());
            pstmt.setString(2, currentEmployee.getLastName());
            pstmt.setString(3, currentEmployee.getPosition());
            pstmt.setDouble(4, currentEmployee.getSalary());
            pstmt.setDate(5, currentEmployee.getHireDate());
            pstmt.setInt(6, currentEmployee.getEmployeeID());

            pstmt.executeUpdate();
            messageLabel.setStyle("-fx-text-fill: green;");
            messageLabel.setText("Car updated successfully!");
            employeeSection.reloadScene();
        } catch (SQLException e) {
            e.printStackTrace();
        }
}
}
```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\EmployeeAddForm.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class EmployeeAddForm {
    private GridPane form;
    private TextField txtFirstName;
    private TextField txtLastName;
    private TextField txtPosition;
    private TextField txtSalary;
    private DatePicker txtHireDate;
    private Label messageLabel;
    private EmployeeSection employeeSection;

    public EmployeeAddForm(EmployeeSection employeeSection) {
        this.employeeSection = employeeSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Labels and TextFields
        Label lblFirstName = new Label("First Name:");
        txtFirstName = new TextField();
        Label lblLastName = new Label("Last Name:");
        txtLastName = new TextField();
        Label lblPosition = new Label("Position:");
        txtPosition = new TextField();
        Label lblSalary = new Label("Salary:");
        txtSalary = new TextField();
        Label lblHireDate = new Label("Hire Date:");
        txtHireDate =  new DatePicker();

        form.add(lblFirstName, 0, 0);
        form.add(txtFirstName, 1, 0);
        form.add(lblLastName, 0, 1);
        form.add(txtLastName, 1, 1);
        form.add(lblPosition, 0, 2);
        form.add(txtPosition, 1, 2);
        form.add(lblSalary, 0, 3);
        form.add(txtSalary, 1, 3);
        form.add(lblHireDate, 0, 4);
        form.add(txtHireDate, 1, 4);

        Button btnSave =  ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveEmployee());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> employeeSection.hideAddForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);

        form.add(hboxButtons, 1, 5);
        // Message Label for Feedback
        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
        form.add(messageLabel, 1, 6);
        addInputConstraints();
    }

    private void addInputConstraints() {
        // First Name: Letters only
        txtFirstName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z]*")) {
                txtFirstName.setText(oldValue);
                messageLabel.setText("First Name must contain only letter.");
            } else {
                messageLabel.setText("");
            }
        });

        // Last Name: Letters only
        txtLastName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z]*")) {
                txtLastName.setText(oldValue);
                messageLabel.setText("Last Name must contain only letters.");
            } else {
                messageLabel.setText("");
            }
        });

        txtPosition.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z]*")) {
                txtPosition.setText(oldValue);
                messageLabel.setText("Position must contain only letters.");
            } else {
                messageLabel.setText("");
            }
        });
        txtSalary.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtSalary.setText(oldValue);
                messageLabel.setText("Salary must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });
       txtHireDate.valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == null) {
                messageLabel.setText("Hire Date is required.");
            } else {
                messageLabel.setText("");
            }
        });
    }

    public GridPane getForm() {
        return form;
    }

    public void showAddForm() {
        clearFields(); 
        messageLabel.setText("");
    }

    private void saveEmployee() {
        // Get input values
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String position = txtPosition.getText();
        String salaryStr = txtSalary.getText();
        String hireDate = txtHireDate.getPromptText();

        // Input validation
        if (firstName.isEmpty() || lastName.isEmpty() || position.isEmpty() || salaryStr.isEmpty()
                || hireDate.isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }

        double salary;
        try {
            salary = Double.parseDouble(salaryStr);
        } catch (NumberFormatException e) {
            messageLabel.setText("Salary must be a valid number.");
            return;
        }

        String sql = "INSERT INTO employees (FirstName, LastName, Position, Salary, HireDate) VALUES (?, ?, ?, ?, ?)";

        try (Connection conn = DatabaseConnection.getConnection();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, firstName);
            pstmt.setString(2, lastName);
            pstmt.setString(3, position);
            pstmt.setDouble(4, salary);
            pstmt.setString(5, hireDate);

            pstmt.executeUpdate();
            messageLabel.setStyle("-fx-text-fill: green; -fx-font-size: 12px;");
            messageLabel.setText("Car added successfully!");

            // Optionally clear fields
            clearFields();

            // Refresh scene
            employeeSection.reloadScene();
        } catch (SQLException e) {
            e.printStackTrace();
            messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
            messageLabel.setText("Error: Unable to save employee.");
        }    
    }
    private void clearFields() {
        txtFirstName.clear();
        txtLastName.clear();
        txtPosition.clear();
        txtSalary.clear();
        txtHireDate.setValue(null);
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Employee.java
```
package com.example;

import java.sql.Date;
import java.time.LocalDate;

public class Employee {
    private int employeeID;
    private String firstName;
    private String lastName;
    private String position;
    private double salary;
    private Date hireDate;

    // Constructor
    public Employee(int employeeID, String firstName, String lastName, String position, double salary, Date hireDate) {
        this.employeeID = employeeID;
        this.firstName = firstName;
        this.lastName = lastName;
        this.position = position;
        this.salary = salary;
        this.hireDate = hireDate;
    }

    // Getters and Setters
    public int getEmployeeID() {
        return employeeID;
    }

    public void setEmployeeID(int employeeID) {
        this.employeeID = employeeID;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
       this.firstName = firstName;
    }

    public String getLastName() {
       return lastName;
    }

    public void setLastName(String lastName) {
       this.lastName = lastName;
    }

    public String getPosition() {
       return position;
    }

    public void setPosition(String position) {
       this.position = position;
    }

    public double getSalary() {
       return salary;
    }

    public void setSalary(double salary) {
       this.salary = salary;
    }

    public Date getHireDate() {
       return hireDate;
    }

    public void setHireDate(Date hireDate) {
      this.hireDate = hireDate;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\DatabaseConnection.java
```
package com.example;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/car";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USERNAME, PASSWORD);
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\CustomerSection.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.util.Callback;
import org.kordamp.ikonli.javafx.FontIcon;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class CustomerSection {
    private TableView<Customer> customerTableView;
    private VBox view;
    private CustomerEditForm customerEditForm;
    private CustomerAddForm customerAddForm;
    private ObservableList<Customer> customerData;

    public CustomerSection() {
        
        // Initialize forms
        customerEditForm = new CustomerEditForm(this);
        customerAddForm = new CustomerAddForm(this);
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Create the TableView
        customerTableView = new TableView<>();
        customerTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        customerTableView.setPrefSize(750, 400);

        // Define columns
        TableColumn<Customer, Integer> colCustomerID = new TableColumn<>("Customer ID");
        colCustomerID.setCellValueFactory(new PropertyValueFactory<>("customerID"));

        TableColumn<Customer, String> colFirstName = new TableColumn<>("First Name");
        colFirstName.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        TableColumn<Customer, String> colLastName = new TableColumn<>("Last Name");
        colLastName.setCellValueFactory(new PropertyValueFactory<>("lastName"));

        TableColumn<Customer, String> colEmail = new TableColumn<>("Email");
        colEmail.setCellValueFactory(new PropertyValueFactory<>("email"));
        colEmail.setMinWidth(50);

    
        TableColumn<Customer, String> colPhone = new TableColumn<>("Phone");
        colPhone.setCellValueFactory(new PropertyValueFactory<>("phone"));

        TableColumn<Customer, String> colAddress = new TableColumn<>("Address");
        colAddress.setCellValueFactory(new PropertyValueFactory<>("address"));

        TableColumn<Customer, String> colCity = new TableColumn<>("City");
        colCity.setCellValueFactory(new PropertyValueFactory<>("city"));

        TableColumn<Customer, String> colState = new TableColumn<>("State");
        colState.setCellValueFactory(new PropertyValueFactory<>("state"));

        TableColumn<Customer, String> colZipCode = new TableColumn<>("Zip Code");
        colZipCode.setCellValueFactory(new PropertyValueFactory<>("zipCode"));

        // Add Edit Icon Column
        TableColumn<Customer, Void> colEdit = createEditColumn();
       

        // Add columns to the TableView
        customerTableView.getColumns().addAll(colCustomerID, colFirstName, colLastName, colEmail, colPhone, colAddress,
                colCity, colState, colZipCode, colEdit);
        customerTableView.getColumns().forEach(column -> column.setReorderable(false));

        // Load data from the database
        customerData = fetchCustomerData();
        FilteredList<Customer> filteredData = new FilteredList<>(customerData, p -> true);
        customerTableView.setItems(filteredData);

        // Create search fields
        TextField txtCustomerID = new TextField();
        txtCustomerID.setPromptText("Customer ID");

        TextField txtFirstName = new TextField();
        txtFirstName.setPromptText("First Name");

        TextField txtLastName = new TextField();
        txtLastName.setPromptText("Last Name");

        TextField txtEmail = new TextField();
        txtEmail.setPromptText("Email");

        TextField txtPhone = new TextField();
        txtPhone.setPromptText("Phone");

        TextField txtAddress = new TextField();
        txtAddress.setPromptText("Address");

        TextField txtCity = new TextField();
        txtCity.setPromptText("City");

        TextField txtState = new TextField();
        txtState.setPromptText("State");

        TextField txtZipCode = new TextField();
        txtZipCode.setPromptText("Zip Code");
        

        // Add filtering logic
        txtCustomerID.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtFirstName.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtLastName.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtEmail.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtPhone.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtAddress.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtCity.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtState.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        txtZipCode.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(
                customer -> filterCustomers(customer, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                        txtAddress, txtCity, txtState, txtZipCode)));

        // Reset button to clear all text fields
        Button btnReset = ButtonFactory.createActionButton("Reset");
        btnReset.setOnAction(e -> {
            txtCustomerID.clear();
            txtFirstName.clear();
            txtLastName.clear();
            txtEmail.clear();
            txtPhone.clear();
            txtAddress.clear();
            txtCity.clear();
            txtState.clear();
            txtZipCode.clear();
        });

      

        // Layout for search fields with label and reset button
        Label lblSearch = new Label("Search:");
        HBox searchFields = new HBox(8, lblSearch, txtCustomerID, txtFirstName, txtLastName, txtEmail, txtPhone,
                txtAddress, txtCity, txtState, txtZipCode);
        searchFields.setAlignment(Pos.CENTER_LEFT);
        searchFields.setPadding(new Insets(5));

        // Add Buttons for Adding Customers
        Button btnAddCustomer = ButtonFactory.createActionButton("Add Customer");
        btnAddCustomer.setOnAction(e -> {
            hideEditForm(); // Hide edit form if visible
            showAddForm();
        });

        HBox hboxButtons = new HBox(10, btnAddCustomer, btnReset);
        hboxButtons.setAlignment(Pos.CENTER);
        hboxButtons.setPadding(new Insets(10));

        // Add everything to the main view
        view.getChildren().addAll(lblSearch, searchFields, hboxButtons, customerTableView);
    }

    private TableColumn<Customer, Void> createEditColumn() {
        TableColumn<Customer, Void> colEdit = new TableColumn<>("Edit");
        colEdit.setCellFactory(param -> new TableCell<Customer, Void>() {
            private final Button editButton = ButtonFactory.createEditButton();

            {
                FontIcon editIcon = new FontIcon("fas-edit");
                editIcon.setIconSize(16);
                editButton.setGraphic(editIcon);
                editButton.setOnAction(event -> {
                    Customer customer = getTableView().getItems().get(getIndex());
                    hideAddForm(); // Hide the Add Form when Edit is clicked
                    showEditForm(customer);
                });
            }

            @Override
            public void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editButton);
                }
                setAlignment(Pos.CENTER);
            }
        });
        return colEdit;
    }

    private ObservableList<Customer> fetchCustomerData() {
        ObservableList<Customer> customerList = FXCollections.observableArrayList();
        try (Connection conn = DatabaseConnection.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM Customers")) {

            while (rs.next()) {
                customerList.add(new Customer(
                        rs.getInt("CustomerID"),
                        rs.getString("FirstName"),
                        rs.getString("LastName"),
                        rs.getString("Email"),
                        rs.getString("Phone"),
                        rs.getString("Address"),
                        rs.getString("City"),
                        rs.getString("State"),
                        rs.getString("ZipCode")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customerList;
    }

    private boolean filterCustomers(Customer customer, TextField txtCustomerID, TextField txtFirstName,
            TextField txtLastName, TextField txtEmail, TextField txtPhone,
            TextField txtAddress, TextField txtCity, TextField txtState,
            TextField txtZipCode) {
        boolean matchesCustomerID = txtCustomerID.getText().isEmpty()
                || String.valueOf(customer.getCustomerID()).equals(txtCustomerID.getText());
        boolean matchesFirstName = txtFirstName.getText().isEmpty()
                || customer.getFirstName().toLowerCase().contains(txtFirstName.getText().toLowerCase());
        boolean matchesLastName = txtLastName.getText().isEmpty()
                || customer.getLastName().toLowerCase().contains(txtLastName.getText().toLowerCase());
        boolean matchesEmail = txtEmail.getText().isEmpty()
                || customer.getEmail().toLowerCase().contains(txtEmail.getText().toLowerCase());
        boolean matchesPhone = txtPhone.getText().isEmpty()
                || customer.getPhone().toLowerCase().contains(txtPhone.getText().toLowerCase());
        boolean matchesAddress = txtAddress.getText().isEmpty()
                || customer.getAddress().toLowerCase().contains(txtAddress.getText().toLowerCase());
        boolean matchesCity = txtCity.getText().isEmpty()
                || customer.getCity().toLowerCase().contains(txtCity.getText().toLowerCase());
        boolean matchesState = txtState.getText().isEmpty()
                || customer.getState().toLowerCase().contains(txtState.getText().toLowerCase());
        boolean matchesZipCode = txtZipCode.getText().isEmpty()
                || customer.getZipCode().toLowerCase().contains(txtZipCode.getText().toLowerCase());
        return matchesCustomerID && matchesFirstName && matchesLastName && matchesEmail && matchesPhone &&
                matchesAddress && matchesCity && matchesState && matchesZipCode;
    }

    private void showEditForm(Customer customer) {
        customerEditForm.showEditForm(customer);
        if (!view.getChildren().contains(customerEditForm.getForm())) {
            view.getChildren().add(customerEditForm.getForm());
        }
    }

    private void showAddForm() {
        customerAddForm.showAddForm();
        if (!view.getChildren().contains(customerAddForm.getForm())) {
            view.getChildren().add(customerAddForm.getForm());
        }
    }

    public void refreshData() {
        customerData = fetchCustomerData();
        customerTableView.setItems(customerData);
    }

    public void hideEditForm() {
        view.getChildren().remove(customerEditForm.getForm());
    }

    public void hideAddForm() {
        view.getChildren().remove(customerAddForm.getForm());
    }

    public void reloadScene() {
        // Get the parent layout (CarShopGUI's main content)
        VBox parent = (VBox) view.getParent();
        if (parent != null) {
            CustomerSection refreshedCustomerSection = new CustomerSection();
            parent.getChildren().setAll(refreshedCustomerSection.getView());
        }
    }

    public VBox getView() {
        return view;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\CustomerEditForm.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CustomerEditForm {
    private GridPane form;
    private TextField txtFirstName;
    private TextField txtLastName;
    private TextField txtEmail;
    private TextField txtPhone;
    private TextField txtAddress;
    private TextField txtCity;
    private TextField txtState;
    private TextField txtZipCode;
    private Label messageLabel; // Validation message display
    private Customer currentCustomer;
    private CustomerSection customerSection;

    public CustomerEditForm(CustomerSection customerSection) {
        this.customerSection = customerSection;
        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(15); // Increased vertical gap
        form.setHgap(10);

        // Labels and TextFields
        Label lblFirstName = new Label("First Name:");
        lblFirstName.setPadding(new Insets(2, 0, 2, 0));
        txtFirstName = new TextField();
        txtFirstName.setPadding(new Insets(2, 2, 2, 2));
        txtFirstName.setMinWidth(200);

        Label lblLastName = new Label("Last Name:");
        lblLastName.setPadding(new Insets(2, 0, 2, 0));
        txtLastName = new TextField();
        txtLastName.setPadding(new Insets(2, 2, 2, 2));
        txtLastName.setMinWidth(200);

        Label lblEmail = new Label("Email:");
        lblEmail.setPadding(new Insets(2, 0, 2, 0));
        txtEmail = new TextField();
        txtEmail.setPadding(new Insets(2, 2, 2, 2));
        txtEmail.setMinWidth(200);        


        Label lblPhone = new Label("Phone:");
        lblPhone.setPadding(new Insets(2, 0, 2, 0));
        txtPhone = new TextField();
        txtPhone.setPadding(new Insets(2, 2, 2, 2));
        txtPhone.setMinWidth(200);

        Label lblAddress = new Label("Address:");
        lblAddress.setPadding(new Insets(2, 0, 2, 0));
        txtAddress = new TextField();
        txtAddress.setPadding(new Insets(2, 2, 2, 2));
        txtAddress.setMinWidth(200);

        Label lblCity = new Label("City:");
        lblCity.setPadding(new Insets(2, 0, 2, 0));
        txtCity = new TextField();
        txtCity.setPadding(new Insets(2, 2, 2, 2));
        txtCity.setMinWidth(200);

        Label lblState = new Label("State:");
        lblState.setPadding(new Insets(2, 0, 2, 0));
        txtState = new TextField();
        txtState.setPadding(new Insets(2, 2, 2, 2));
        txtState.setMinWidth(200);

        Label lblZipCode = new Label("Zip Code:");
        lblZipCode.setPadding(new Insets(2, 0, 2, 0));
        txtZipCode = new TextField();
        txtZipCode.setPadding(new Insets(2, 2, 2, 2));
        txtZipCode.setMinWidth(200);

        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");


        // Layout
        form.add(lblFirstName, 0, 0);
        form.add(txtFirstName, 1, 0);
        form.add(lblLastName, 2, 0);
        form.add(txtLastName, 3, 0);
        form.add(lblEmail, 0, 1);
        form.add(txtEmail, 1, 1);
        form.add(lblPhone, 2, 1);
        form.add(txtPhone, 3, 1);
        form.add(lblAddress, 0, 2);
        form.add(txtAddress, 1, 2);
        form.add(lblCity, 2, 2);
        form.add(txtCity, 3, 2);
        form.add(lblState, 0, 3);
        form.add(txtState, 1, 3);
        form.add(lblZipCode, 2, 3);
        form.add(txtZipCode, 3, 3);
        form.add(messageLabel, 1, 4, 3, 1); // Span the message label across multiple columns for better visibility
        addInputConstraints();

        // Buttons
        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveCustomer());
        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> customerSection.hideEditForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);
        form.add(hboxButtons, 0, 6, 4, 1); // Span the buttons across multiple columns

    }

    private void addInputConstraints() {
        txtFirstName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9]*")) {
                txtFirstName.setText(oldValue);
                messageLabel.setText("First Name must contain only letters and numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        txtLastName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9]*")) {
                txtLastName.setText(oldValue);
                messageLabel.setText("Last Name must contain only letters and numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        txtEmail.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$")) {
                messageLabel.setText("Enter a valid email address ex: example@example.com");
            } else {
                messageLabel.setText("");
            }
        });

        txtPhone.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d{0,3}(-\\d{0,5})?")) {
                txtPhone.setText(oldValue);
                messageLabel.setText("Phone must be in the format 123-4567.");
            } else if (newValue.length() > 8) {
                txtPhone.setText(oldValue);
                messageLabel.setText("Phone must be exactly 7 digits.");
            } else {
                messageLabel.setText("");
            }
        });

        txtAddress.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ,]*")) {
                txtAddress.setText(oldValue);
                messageLabel.setText("Address contains invalid characters.");
            } else {
                messageLabel.setText("");
            }
        });

        txtCity.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ]*")) {
                txtCity.setText(oldValue);
                messageLabel.setText("City must contain only letters and numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        txtState.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ]*")) {
                txtState.setText(oldValue);
                messageLabel.setText("State must contain only letters and numbers.");
            } else {
                messageLabel.setText("");
            }
        });

        txtZipCode.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*") || newValue.length() > 5) {
                txtZipCode.setText(oldValue);
                messageLabel.setText("Zip Code must be exactly 5 digits.");
            } else {
                messageLabel.setText("");
            }
        });
    }

    public GridPane getForm() {
        return form;
    }

    public void showEditForm(Customer customer) {
        this.currentCustomer = customer;
        txtFirstName.setText(customer.getFirstName());
        txtLastName.setText(customer.getLastName());
        txtEmail.setText(customer.getEmail());
        txtPhone.setText(customer.getPhone());
        txtAddress.setText(customer.getAddress());
        txtCity.setText(customer.getCity());
        txtState.setText(customer.getState());
        txtZipCode.setText(customer.getZipCode());
    }

    private void saveCustomer() {
        messageLabel.setText(""); // Clear previous messages

        // Get input values
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String email = txtEmail.getText();
        String phone = txtPhone.getText();
        String address = txtAddress.getText();
        String city = txtCity.getText();
        String state = txtState.getText();
        String zipCode = txtZipCode.getText();

        // Input validation
        if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || phone.isEmpty() ||
                address.isEmpty() || city.isEmpty() || state.isEmpty() || zipCode.isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }
        if (zipCode.length() != 5) {
            messageLabel.setText("VIN must be exactly 5 digits.");
            return;
        }
        if (!email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$")) {
            messageLabel.setText("Enter a valid email address ex: example@example.com");
            return;
        }
        if (!phone.matches("\\d{3}-\\d{4}")) {
            messageLabel.setText("Phone number must be in the format 123-4567.");
            return;
        }
        currentCustomer.setFirstName(txtFirstName.getText());
        currentCustomer.setLastName(txtLastName.getText());
        currentCustomer.setEmail(txtEmail.getText());
        currentCustomer.setPhone(txtPhone.getText());
        currentCustomer.setAddress(txtAddress.getText());
        currentCustomer.setCity(txtCity.getText());
        currentCustomer.setState(txtState.getText());
        currentCustomer.setZipCode(txtZipCode.getText());

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("UPDATE customers SET FirstName = ?, LastName = ?, Email = ?, Phone = ?, Address = ?, City = ?, State = ?, ZipCode = ? WHERE CustomerID = ?")) {

            pstmt.setString(1, currentCustomer.getFirstName());
            pstmt.setString(2, currentCustomer.getLastName());
            pstmt.setString(3, currentCustomer.getEmail());
            pstmt.setString(4, currentCustomer.getPhone());
            pstmt.setString(5, currentCustomer.getAddress());
            pstmt.setString(6, currentCustomer.getCity());
            pstmt.setString(7, currentCustomer.getState());
            pstmt.setString(8, currentCustomer.getZipCode());
            pstmt.setInt(9, currentCustomer.getCustomerID());

            pstmt.executeUpdate();
            customerSection.reloadScene();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\CustomerAddForm.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CustomerAddForm {
    private GridPane form;
    private TextField txtFirstName;
    private TextField txtLastName;
    private TextField txtEmail;
    private TextField txtPhone;
    private TextField txtAddress;
    private TextField txtCity;
    private TextField txtState;
    private TextField txtZipCode;
    private Label messageLabel; // For displaying validation messages
    private CustomerSection customerSection;

    public CustomerAddForm(CustomerSection customerSection) {
        this.customerSection = customerSection;

        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(15); // Increased vertical gap
        form.setHgap(10);

        // Labels and TextFields
        Label lblFirstName = new Label("First Name:");
        lblFirstName.setPadding(new Insets(2, 0, 2, 0));
        txtFirstName = new TextField();
        txtFirstName.setPadding(new Insets(2, 2, 2, 2));
        txtFirstName.setMinWidth(200);

        Label lblLastName = new Label("Last Name:");
        lblLastName.setPadding(new Insets(2, 0, 2, 0));
        txtLastName = new TextField();
        txtLastName.setPadding(new Insets(2, 2, 2, 2));
        txtLastName.setMinWidth(200);

        Label lblEmail = new Label("Email:");
        lblEmail.setPadding(new Insets(2, 0, 2, 0));
        txtEmail = new TextField();
        txtEmail.setPadding(new Insets(2, 2, 2, 2));
        txtEmail.setMinWidth(200);

        Label lblPhone = new Label("Phone:");
        lblPhone.setPadding(new Insets(2, 0, 2, 0));
        txtPhone = new TextField();
        txtPhone.setPadding(new Insets(2, 2, 2, 2));
        txtPhone.setMinWidth(200);

        Label lblAddress = new Label("Address:");
        lblAddress.setPadding(new Insets(2, 0, 2, 0));
        txtAddress = new TextField();
        txtAddress.setPadding(new Insets(2, 2, 2, 2));
        txtAddress.setMinWidth(200);

        Label lblCity = new Label("City:");
        lblCity.setPadding(new Insets(2, 0, 2, 0));
        txtCity = new TextField();
        txtCity.setPadding(new Insets(2, 2, 2, 2));
        txtCity.setMinWidth(200);

        Label lblState = new Label("State:");
        lblState.setPadding(new Insets(2, 0, 2, 0));
        txtState = new TextField();
        txtState.setPadding(new Insets(2, 2, 2, 2));
        txtState.setMinWidth(200);

        Label lblZipCode = new Label("Zip Code:");
        lblZipCode.setPadding(new Insets(2, 0, 2, 0));
        txtZipCode = new TextField();
        txtZipCode.setPadding(new Insets(2, 2, 2, 2));
        txtZipCode.setMinWidth(200);

        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");

        addInputConstraints();

        // Layout
        form.add(lblFirstName, 0, 0);
        form.add(txtFirstName, 1, 0);
        form.add(lblLastName, 2, 0);
        form.add(txtLastName, 3, 0);
        form.add(lblEmail, 0, 1);
        form.add(txtEmail, 1, 1);
        form.add(lblPhone, 2, 1);
        form.add(txtPhone, 3, 1);
        form.add(lblAddress, 0, 2);
        form.add(txtAddress, 1, 2);
        form.add(lblCity, 2, 2);
        form.add(txtCity, 3, 2);
        form.add(lblState, 0, 3);
        form.add(txtState, 1, 3);
        form.add(lblZipCode, 2, 3);
        form.add(txtZipCode, 3, 3);
        form.add(messageLabel, 1, 4, 3, 1); // Span the message label across multiple columns for better visibility

        // Buttons
        Button btnSave =  ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveCustomer());
        Button btnCancel =  ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> customerSection.hideAddForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);
        form.add(hboxButtons, 0, 6, 4, 1); // Span the buttons across multiple columns

    }

    private void addInputConstraints() {
        // First Name: Letters only
        txtFirstName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9]*")) {
                txtFirstName.setText(oldValue);
                messageLabel.setText("First Name must contain only letter and number.");
            } else {
                messageLabel.setText("");
            }
        });

        // Last Name: Letters only
        txtLastName.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9]*")) {
                txtLastName.setText(oldValue);
                messageLabel.setText("Last Name must contain only letters and number.");
            } else {
                messageLabel.setText("");
            }
        });

        // Email: Simple email pattern validation
        txtEmail.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$")) {
                messageLabel.setText("Enter a valid email address ex: example@example.com");
            } else {
                messageLabel.setText("");
            }
        });

        // Phone: Must be in the format 123-4567
        txtPhone.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d{0,3}(-\\d{0,5})?")) {
                txtPhone.setText(oldValue);
                messageLabel.setText("Phone must be in the format 123-4567.");
            } else if (newValue.length() > 8) {
                txtPhone.setText(oldValue);
                messageLabel.setText("Phone must be exactly 7 digits.");
            } else {
                messageLabel.setText("");
            }
        });

        // Address: Allow letters, digits, spaces, and commas
        txtAddress.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ,]*")) {
                txtAddress.setText(oldValue);
                messageLabel.setText("Address contains ex: 123 Main St.");
            } else {
                messageLabel.setText("");
            }
        });

        // City: Letters only
        txtCity.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ]*")) {
                txtCity.setText(oldValue);
                messageLabel.setText("City must contain only letters and number.");
            } else {
                messageLabel.setText("");
            }
        });

        // State: Letters only
        txtState.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ]*")) {
                txtState.setText(oldValue);
                messageLabel.setText("State must contain only letters and number.");
            } else {
                messageLabel.setText("");
            }
        });

        // Zip Code: Digits only
        txtZipCode.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*") || newValue.length() > 5) {
                txtZipCode.setText(oldValue);
                messageLabel.setText("Zip Code must be exactly 5 digits.");
            } else {
                messageLabel.setText("");
            }
        });
    }

    private void saveCustomer() {
        messageLabel.setText(""); // Clear previous messages

        // Get input values
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String email = txtEmail.getText();
        String phone = txtPhone.getText();
        String address = txtAddress.getText();
        String city = txtCity.getText();
        String state = txtState.getText();
        String zipCode = txtZipCode.getText();

        // Input validation
        if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || phone.isEmpty() ||
                address.isEmpty() || city.isEmpty() || state.isEmpty() || zipCode.isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }
        if (zipCode.length() != 5) {
            messageLabel.setText("VIN must be exactly 5 digits.");
            return;
        }
        if (!email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$")) {
            messageLabel.setText("Enter a valid email address ex: example@example.com");
            return;
        }
        if (!phone.matches("\\d{3}-\\d{4}")) {
            messageLabel.setText("Phone number must be in the format 123-4567.");
            return;
        }

        String sql = "INSERT INTO customers (FirstName, LastName, Email, Phone, Address, City, State, ZipCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        try (Connection conn = DatabaseConnection.getConnection();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, firstName);
            pstmt.setString(2, lastName);
            pstmt.setString(3, email);
            pstmt.setString(4, phone);
            pstmt.setString(5, address);
            pstmt.setString(6, city);
            pstmt.setString(7, state);
            pstmt.setString(8, zipCode);

            pstmt.executeUpdate();

            // Success Message
            messageLabel.setStyle("-fx-text-fill: green;");
            messageLabel.setText("Customer added successfully!");

            // Clear fields
            clearFields();

            // Refresh data
            customerSection.reloadScene();
        } catch (SQLException e) {
            e.printStackTrace();
            messageLabel.setStyle("-fx-text-fill: red;");
            messageLabel.setText("Database Error: Unable to save customer.");
        }
    }

    private void clearFields() {
        txtFirstName.clear();
        txtLastName.clear();
        txtEmail.clear();
        txtPhone.clear();
        txtAddress.clear();
        txtCity.clear();
        txtState.clear();
        txtZipCode.clear();
    }

    public GridPane getForm() {
        return form;
    }

    public void showAddForm() {
        clearFields();
        messageLabel.setText("");
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Customer.java
```
package com.example;

public class Customer {
    private int customerID;
    private String firstName;
    private String lastName;
    private String email;
    private String phone;
    private String address;
    private String city;
    private String state;
    private String zipCode;

    // Constructor
    public Customer(int customerID, String firstName, String lastName, String email, String phone,
                    String address, String city, String state, String zipCode) {
        this.customerID = customerID;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phone = phone;
        this.address = address;
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
    }

    // Getters and Setters
    public int getCustomerID() {
        return customerID;
    }

    public void setCustomerID(int customerID) {
        this.customerID = customerID;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
       this.firstName = firstName;
    }

    public String getLastName() {
       return lastName;
    }

    public void setLastName(String lastName) {
       this.lastName = lastName;
    }

    public String getEmail() {
       return email;
    }

    public void setEmail(String email) {
       this.email = email;
    }

    public String getPhone() {
       return phone;
    }

    public void setPhone(String phone) {
       this.phone = phone;
    }

    public String getAddress() {
       return address;
    }

    public void setAddress(String address) {
       this.address = address;
    }

    public String getCity() {
       return city;
    }

    public void setCity(String city) {
       this.city = city;
    }

    public String getState() {
       return state;
    }

    public void setState(String state) {
       this.state = state;
    }

    public String getZipCode() {
       return zipCode;
    }

    public void setZipCode(String zipCode) {
       this.zipCode = zipCode;
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\CarShopGUI.java
```
package com.example;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

public class CarShopGUI extends Application {
    private String username;
    private VBox mainContent;

    public CarShopGUI() {
        this.username = ""; // Default username if not provided
    }

    public CarShopGUI(String username) {
        this.username = username;
    }

    @Override
    public void start(Stage primaryStage) {
        // Create the sidebar
        Sidebar sidebar = new Sidebar(username);

        // Create the header with title and username
        HBox header = new HBox();
        Label titleLabel = new Label("Kareem Garage");
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 24));
        titleLabel.setStyle("-fx-text-fill: white;");
        
        Label usernameLabel = new Label("Hello, " + username);
        usernameLabel.setFont(Font.font("Arial", FontWeight.NORMAL, 18));
        usernameLabel.setStyle("-fx-text-fill: white;");
        
        header.getChildren().addAll(titleLabel, usernameLabel);
        header.setSpacing(20);
        header.setAlignment(Pos.CENTER_LEFT);
        header.getStyleClass().add("header"); 

        
        header.setMaxWidth(Double.MAX_VALUE);  
        HBox.setHgrow(header, Priority.ALWAYS); 

        // Main content area
        mainContent = new VBox();
        mainContent.setPadding(new Insets(10));
        mainContent.setSpacing(10);
        mainContent.getChildren().add(new Label("Select a Section"));

        // Create a VBox to hold the header and main content
        VBox contentVBox = new VBox();
        contentVBox.getChildren().addAll(header, mainContent);
        VBox.setVgrow(mainContent, Priority.ALWAYS);

        // Create the main layout with sidebar and content
        HBox mainLayout = new HBox();
        mainLayout.setSpacing(0); // No spacing between sidebar and content
        mainLayout.getChildren().addAll(sidebar.getSidebar(), contentVBox); // Sidebar first, then content

        // Ensure sidebar has a fixed width
        sidebar.getSidebar().setMinWidth(200); // Fixed width for sidebar
        sidebar.getSidebar().setMaxWidth(200); // Fixed width for sidebar
        // Ensure contentVBox grows to fill available width
        HBox.setHgrow(contentVBox, Priority.ALWAYS); // Allow contentVBox to grow and take up remaining space

        // Event handling for sidebar buttons
        sidebar.getBtnCars().setOnAction(e -> showCarSection());
        sidebar.getBtnCustomers().setOnAction(e -> showCustomerSection());
        sidebar.getBtnEmployees().setOnAction(e -> showEmployeeSection());
        sidebar.getBtnOrders().setOnAction(e -> showOrdersSection());
        sidebar.getBtnPayments().setOnAction(e -> showPaymentsSection());
        sidebar.getBtnServices().setOnAction(e -> showServicesSection());
        sidebar.getBtnReports().setOnAction(e -> showReportsSection());
        sidebar.getBtnLogout().setOnAction(e -> primaryStage.close());

        // Scene setup
        Scene scene = new Scene(mainLayout);
        //,ake secne full screen
        primaryStage.setMaximized(true);

        // Link the CSS file
        scene.getStylesheets().add(getClass().getResource("/com/example/styles.css").toExternalForm());


        primaryStage.setTitle("Car Shop System");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Methods to show content for each section
    private void showCarSection() {
        CarSection carSection = new CarSection();
        mainContent.getChildren().setAll(carSection.getView());
    }

    private void showCustomerSection() {
        CustomerSection customerSection = new CustomerSection();
        mainContent.getChildren().setAll(customerSection.getView());
    }

    private void showEmployeeSection() {
        EmployeeSection employeeSection = new EmployeeSection();
        mainContent.getChildren().setAll(employeeSection.getView());
    }

    private void showOrdersSection() {
        OrdersSection ordersSection = new OrdersSection();
        mainContent.getChildren().setAll(ordersSection.getView());
    }

    private void showPaymentsSection() {
        PaymentsSection paymentsSection = new PaymentsSection();
        mainContent.getChildren().setAll(paymentsSection.getView());
    }

    private void showServicesSection() {
        ServicesSection servicesSection = new ServicesSection();
        mainContent.getChildren().setAll(servicesSection.getView());
    }

    private void showReportsSection() {
        ReportsSection reportsSection = new ReportsSection();
        mainContent.getChildren().setAll(reportsSection.getView());
    }

    public static void main(String[] args) {
        launch(args);
    }

    public void setMaximized(boolean b) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'setMaximized'");
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\CarSection.java
```
package com.example;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import org.kordamp.ikonli.javafx.FontIcon;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Collectors;

public class CarSection {
    private VBox view;
    private TableView<Car> carTableView;
    private ObservableList<Car> carData;
    private CarEditForm carEditForm;
    private CarAddForm carAddForm;

    public CarSection() {
        // Initialize forms
        carEditForm = new CarEditForm(this);
        carAddForm = new CarAddForm(this);
        
        view = new VBox(10);
        view.setPadding(new Insets(10));

        // Create the TableView
        carTableView = new TableView<>();
        carTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        carTableView.setPrefSize(800, 400);

        // Define columns
        TableColumn<Car, Integer> colCarID = new TableColumn<>("Car ID");
        colCarID.setCellValueFactory(new PropertyValueFactory<>("carID"));

        TableColumn<Car, String> colMake = new TableColumn<>("Make");
        colMake.setCellValueFactory(new PropertyValueFactory<>("make"));

        TableColumn<Car, String> colModel = new TableColumn<>("Model");
        colModel.setCellValueFactory(new PropertyValueFactory<>("model"));

        TableColumn<Car, Integer> colYear = new TableColumn<>("Year");
        colYear.setCellValueFactory(new PropertyValueFactory<>("year"));

        TableColumn<Car, Double> colPrice = new TableColumn<>("Price");
        colPrice.setCellValueFactory(new PropertyValueFactory<>("price"));

        TableColumn<Car, Integer> colStock = new TableColumn<>("Stock");
        colStock.setCellValueFactory(new PropertyValueFactory<>("stock"));

        TableColumn<Car, String> colVIN = new TableColumn<>("VIN");
        colVIN.setCellValueFactory(new PropertyValueFactory<>("vin"));

        // Add Edit Icon Column
        TableColumn<Car, Void> colEdit = createEditColumn();

        // Add columns to the TableView
        carTableView.getColumns().addAll(colCarID, colMake, colModel, colYear, colPrice, colStock, colVIN, colEdit);

        // Disable column reordering
        carTableView.getColumns().forEach(column -> column.setReorderable(false));

        // Load data from the database
        carData = fetchCarData();
        FilteredList<Car> filteredData = new FilteredList<>(carData, p -> true);
        carTableView.setItems(filteredData);

        // Create search fields
        TextField txtCarID =TextFieldFactory.createTextField("Car ID");

        TextField txtMakeSearch = TextFieldFactory.createTextField("Make");

        TextField txtModelSearch = TextFieldFactory.createTextField("Model");

        ComboBox<Integer> yearComboBox = new ComboBox<>();
        yearComboBox.setPromptText("Year");
        updateYearComboBox(yearComboBox);
        yearComboBox.setStyle("-fx-font-size: 12px; -fx-padding: 6px; -fx-background-radius: 10px;");

        TextField txtPriceSearch =TextFieldFactory.createTextField("Price");

        TextField txtStockSearch = TextFieldFactory.createTextField("Stock");

        TextField txtVINSearch = TextFieldFactory.createTextField("VIN");

        // Add filtering logic
        txtCarID.textProperty().addListener((observable, oldValue, newValue) -> 
            filteredData.setPredicate(car -> filterCars(car, txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch))
        );

        txtMakeSearch.textProperty().addListener((observable, oldValue, newValue) -> 
            filteredData.setPredicate(car -> filterCars(car, txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch))
        );

        txtModelSearch.textProperty().addListener((observable, oldValue, newValue) -> 
            filteredData.setPredicate(car -> filterCars(car, txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch))
        );

        yearComboBox.valueProperty().addListener((observable, oldValue, newValue) -> 
            filteredData.setPredicate(car -> filterCars(car, txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch))
        );

        txtPriceSearch.textProperty().addListener((observable, oldValue, newValue) -> 
            filteredData.setPredicate(car -> filterCars(car, txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch))
        );

        txtStockSearch.textProperty().addListener((observable, oldValue, newValue) -> 
            filteredData.setPredicate(car -> filterCars(car, txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch))
        );

        txtVINSearch.textProperty().addListener((observable, oldValue, newValue) -> 
            filteredData.setPredicate(car -> filterCars(car, txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch))
        );

        // Reset button to clear all text fields
        Button btnReset = ButtonFactory.createActionButton( "Reset");
        btnReset.setOnAction(e -> {
            txtCarID.clear();
            txtMakeSearch.clear();
            txtModelSearch.clear();
            yearComboBox.setValue(null);
            txtPriceSearch.clear();
            txtStockSearch.clear();
            txtVINSearch.clear();
        });

        

        // Layout for search fields with label and reset button
        Label lblSearch = new Label("Search:");
        HBox searchFields = new HBox(8,  txtCarID, txtMakeSearch, txtModelSearch, yearComboBox, txtPriceSearch, txtStockSearch, txtVINSearch);
        searchFields.setAlignment(Pos.CENTER_LEFT);
        searchFields.setPadding(new Insets(5));

        // Add Buttons for Adding Cars
        Button btnAddCar = ButtonFactory.createActionButton("Add Car");
        btnAddCar.setOnAction(e -> {
            hideEditForm(); // Hide edit form if visible
            showAddForm();
        });

        HBox hboxButtons = new HBox(10, btnAddCar, btnReset);
        hboxButtons.setAlignment(Pos.CENTER);
        hboxButtons.setPadding(new Insets(10));

        // Add everything to the main view
        view.getChildren().addAll(lblSearch,searchFields, hboxButtons, carTableView);
    }

    private void updateYearComboBox(ComboBox<Integer> yearComboBox) {
        ObservableList<Integer> years = FXCollections.observableArrayList(
                carData.stream().map(Car::getYear).distinct().sorted().collect(Collectors.toList())
        );
        yearComboBox.setItems(years);
    }

    private boolean filterCars(Car car, TextField txtCarID, TextField txtMakeSearch, TextField txtModelSearch,
    ComboBox<Integer> yearComboBox, TextField txtPriceSearch, TextField txtStockSearch, TextField txtVINSearch) {
        boolean matchesCarID = txtCarID.getText().isEmpty()
        || String.valueOf(car.getCarID()).equals(txtCarID.getText());
boolean matchesMake = txtMakeSearch.getText().isEmpty()
|| car.getMake().toLowerCase().contains(txtMakeSearch.getText().toLowerCase());
boolean matchesModel = txtModelSearch.getText().isEmpty()
|| car.getModel().toLowerCase().contains(txtModelSearch.getText().toLowerCase());
boolean matchesYear = yearComboBox.getValue() == null || car.getYear() == yearComboBox.getValue();
boolean matchesPrice = txtPriceSearch.getText().isEmpty()
|| String.valueOf(car.getPrice()).contains(txtPriceSearch.getText());
boolean matchesStock = txtStockSearch.getText().isEmpty()
|| String.valueOf(car.getStock()).equals(txtStockSearch.getText());
boolean matchesVIN = txtVINSearch.getText().isEmpty()
|| car.getVin().equals(txtVINSearch.getText()); // Exact match for VIN

return matchesCarID && matchesMake && matchesModel && matchesYear && matchesPrice && matchesStock && matchesVIN;
}

    private TableColumn<Car, Void> createEditColumn() {
        TableColumn<Car, Void> colEdit = new TableColumn<>("Edit");
        colEdit.setCellFactory(param -> new TableCell<Car, Void>() {
            private final Button editButton = ButtonFactory.createEditButton();

            {
                FontIcon editIcon = new FontIcon("fas-edit");
                editIcon.setIconSize(16);
                editButton.setGraphic(editIcon);
                editButton.setOnAction(event -> {
                    Car car = getTableView().getItems().get(getIndex());
                    hideAddForm(); // Hide the Add Form when Edit is clicked
                    showEditForm(car);
                });
            }

            @Override
            public void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editButton);
                }
                setAlignment(Pos.CENTER);
            }
        });
        return colEdit;
    }

    private ObservableList<Car> fetchCarData() {
        ObservableList<Car> carList = FXCollections.observableArrayList();
        String sql = "SELECT * FROM Cars";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                Car car = new Car(
                        rs.getInt("CarID"),
                        rs.getString("Make"),
                        rs.getString("Model"),
                        rs.getInt("Year"),
                        rs.getDouble("Price"),
                        rs.getInt("Stock"),
                        rs.getString("VIN")
                );
                carList.add(car);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to load car data.");
        }
        return carList;
    }

    private void showEditForm(Car car) {
        carEditForm.showEditForm(car);
        if (!view.getChildren().contains(carEditForm.getForm())) {
            view.getChildren().add(carEditForm.getForm());
        }
    }

    private void showAddForm() {
        carAddForm.showAddForm();
        if (!view.getChildren().contains(carAddForm.getForm())) {
            view.getChildren().add(carAddForm.getForm());
        }
    }

    public void refreshData() {
        carData = fetchCarData();
        carTableView.setItems(carData);
        carTableView.refresh(); // Force refresh the TableView
    }
    

    public void hideEditForm() {
        view.getChildren().remove(carEditForm.getForm());
    }

    public void hideAddForm() {
        view.getChildren().remove(carAddForm.getForm());
    }
    public void reloadScene() {
        // Get the parent layout (CarShopGUI's main content)
        VBox parent = (VBox) view.getParent();
        if (parent != null) {
            CarSection refreshedCarSection = new CarSection();
            parent.getChildren().setAll(refreshedCarSection.getView());
        }
    }
    
    public VBox getView() {
        return view;
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\CarEditForm.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CarEditForm {
    private GridPane form;
    private TextField txtMake;
    private TextField txtModel;
    private TextField txtYear;
    private TextField txtPrice;
    private TextField txtStock;
    private TextField txtVIN;
    private Label messageLabel; // Label for displaying messages
    private Car currentCar;
    private CarSection carSection;

    public CarEditForm(CarSection carSection) {
        this.carSection = carSection;

        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        Label lblMake = new Label("Make:");
        txtMake = new TextField();
        Label lblModel = new Label("Model:");
        txtModel = new TextField();
        Label lblYear = new Label("Year:");
        txtYear = new TextField();
        Label lblPrice = new Label("Price:");
        txtPrice = new TextField();
        Label lblStock = new Label("Stock:");
        txtStock = new TextField();
        Label lblVIN = new Label("VIN:");
        txtVIN = new TextField();

        addInputConstraints();

        form.add(lblMake, 0, 0);
        form.add(txtMake, 1, 0);
        form.add(lblModel, 0, 1);
        form.add(txtModel, 1, 1);
        form.add(lblYear, 0, 2);
        form.add(txtYear, 1, 2);
        form.add(lblPrice, 0, 3);
        form.add(txtPrice, 1, 3);
        form.add(lblStock, 0, 4);
        form.add(txtStock, 1, 4);
        form.add(lblVIN, 0, 5);
        form.add(txtVIN, 1, 5);

        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveCar());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> carSection.hideEditForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);
        form.add(hboxButtons, 1, 6);

        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
        form.add(messageLabel, 1, 7);
    }

    private void addInputConstraints() {
        // Allow alphanumeric characters for Make
        txtMake.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z]*")) {
                txtMake.setText(oldValue);
                messageLabel.setText("Make field must contain only letters.");
            } else {
                messageLabel.setText("");
            }
        });
    
        // Allow alphanumeric characters for Model
        txtModel.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ]*")) {
                txtModel.setText(oldValue);
                messageLabel.setText("Model field must contain only letters and numbers.");
            } else {
                messageLabel.setText("");
            }
        });
    
        // Allow only digits for Year and Stock
        txtYear.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtYear.setText(oldValue);
                messageLabel.setText("Year must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });
    
        txtStock.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtStock.setText(oldValue);
                messageLabel.setText("Stock must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });
    
        // Allow only numbers and one decimal for Price
        txtPrice.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtPrice.setText(oldValue);
                messageLabel.setText("Price must be a valid number.");
            } else {
                messageLabel.setText("");
            }
        });
    
        // VIN: Only numeric input, exactly 17 digits
        txtVIN.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtVIN.setText(oldValue);
                messageLabel.setText("VIN must contain only numbers.");
            } else if (newValue.length() > 17) {
                txtVIN.setText(oldValue);
                messageLabel.setText("VIN must be exactly 17 digits.");
            } else {
                messageLabel.setText("");
            }
        });
    }
    

    public GridPane getForm() {
        return form;
    }

    public void showEditForm(Car car) {
        this.currentCar = car;

        txtMake.setText(car.getMake());
        txtModel.setText(car.getModel());
        txtYear.setText(String.valueOf(car.getYear()));
        txtPrice.setText(String.valueOf(car.getPrice()));
        txtStock.setText(String.valueOf(car.getStock()));
        txtVIN.setText(car.getVin());
        messageLabel.setText("");
    }

    private void saveCar() {
        messageLabel.setText("");

        String make = txtMake.getText();
        String model = txtModel.getText();
        String yearStr = txtYear.getText();
        String priceStr = txtPrice.getText();
        String stockStr = txtStock.getText();
        String vin = txtVIN.getText();

        if (make.isEmpty() || model.isEmpty() || yearStr.isEmpty() || priceStr.isEmpty() || stockStr.isEmpty() || vin.isEmpty()) {
            messageLabel.setText("All fields are required.");
            return;
        }

        if (vin.length() != 17) {
            messageLabel.setText("VIN must be exactly 17 digits.");
            return;
        }

        int year;
        double price;
        int stock;

        try {
            year = Integer.parseInt(yearStr);
            price = Double.parseDouble(priceStr);
            stock = Integer.parseInt(stockStr);
        } catch (NumberFormatException e) {
            messageLabel.setText("Year, Price, and Stock must be valid numbers.");
            return;
        }

        String sql = "UPDATE Cars SET Make = ?, Model = ?, Year = ?, Price = ?, Stock = ?, VIN = ? WHERE CarID = ?";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, make);
            pstmt.setString(2, model);
            pstmt.setInt(3, year);
            pstmt.setDouble(4, price);
            pstmt.setInt(5, stock);
            pstmt.setString(6, vin);
            pstmt.setInt(7, currentCar.getCarID());

            pstmt.executeUpdate();

            messageLabel.setStyle("-fx-text-fill: green;");
            messageLabel.setText("Car updated successfully!");
            carSection.reloadScene();

        } catch (SQLException e) {
            messageLabel.setStyle("-fx-text-fill: red;");
            messageLabel.setText("Error: VIN must be unique.");
        }
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\CarAddForm.java
```
package com.example;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CarAddForm {
    private GridPane form;
    private TextField txtMake;
    private TextField txtModel;
    private TextField txtYear;
    private TextField txtPrice;
    private TextField txtStock;
    private TextField txtVIN;
    private Label messageLabel; // For displaying messages
    private CarSection carSection;

    public CarAddForm(CarSection carSection) {
        this.carSection = carSection;

        form = new GridPane();
        form.setPadding(new Insets(20));
        form.setVgap(10);
        form.setHgap(10);

        // Labels and TextFields
        Label lblMake = new Label("Make:");
        txtMake = new TextField();
        Label lblModel = new Label("Model:");
        txtModel = new TextField();
        Label lblYear = new Label("Year:");
        txtYear = new TextField();
        Label lblPrice = new Label("Price:");
        txtPrice = new TextField();
        Label lblStock = new Label("Stock:");
        txtStock = new TextField();
        Label lblVIN = new Label("VIN:");
        txtVIN = new TextField();

        addInputConstraints();

        form.add(lblMake, 0, 0);
        form.add(txtMake, 1, 0);
        form.add(lblModel, 0, 1);
        form.add(txtModel, 1, 1);
        form.add(lblYear, 0, 2);
        form.add(txtYear, 1, 2);
        form.add(lblPrice, 0, 3);
        form.add(txtPrice, 1, 3);
        form.add(lblStock, 0, 4);
        form.add(txtStock, 1, 4);
        form.add(lblVIN, 0, 5);
        form.add(txtVIN, 1, 5);

        Button btnSave = ButtonFactory.createActionButton("Save");
        btnSave.setOnAction(e -> saveCar());

        Button btnCancel = ButtonFactory.createActionButton("Cancel");
        btnCancel.setOnAction(e -> carSection.hideAddForm());

        HBox hboxButtons = new HBox(10, btnSave, btnCancel);
        hboxButtons.setAlignment(Pos.CENTER_RIGHT);
        form.add(hboxButtons, 1, 6);

        // Message label for feedback
        messageLabel = new Label();
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
        form.add(messageLabel, 1, 7);
    }

    private void addInputConstraints() {
        // Allow alphanumeric characters for Make
        txtMake.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z]*")) {
                txtMake.setText(oldValue);
                messageLabel.setText("Make field must contain only letters .");
            } else {
                messageLabel.setText("");
            }
        });
    
        // Allow alphanumeric characters for Model
        txtModel.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("[a-zA-Z0-9 ]*")) {
                txtModel.setText(oldValue);
                messageLabel.setText("Model field must contain only letters and numbers.");
            } else {
                messageLabel.setText("");
            }
        });
    
        // Allow only digits for Year and Stock
        txtYear.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtYear.setText(oldValue);
                messageLabel.setText("Year must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });
    
        txtStock.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtStock.setText(oldValue);
                messageLabel.setText("Stock must contain only numbers.");
            } else {
                messageLabel.setText("");
            }
        });
    
        // Allow only numbers and one decimal for Price
        txtPrice.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                txtPrice.setText(oldValue);
                messageLabel.setText("Price must be a valid number.");
            } else {
                messageLabel.setText("");
            }
        });
    
        // VIN: Only numeric input, exactly 17 digits
        txtVIN.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*")) {
                txtVIN.setText(oldValue);
                messageLabel.setText("VIN must contain only numbers.");
            } else if (newValue.length() > 17) {
                txtVIN.setText(oldValue);
                messageLabel.setText("VIN must be exactly 17 digits.");
            } else {
                messageLabel.setText("");
            }
        });
    }
    

   private void saveCar() {
    messageLabel.setText(""); // Clear previous messages

    String make = txtMake.getText();
    String model = txtModel.getText();
    String yearStr = txtYear.getText();
    String priceStr = txtPrice.getText();
    String stockStr = txtStock.getText();
    String vin = txtVIN.getText();

    // Input validation
    if (make.isEmpty() || model.isEmpty() || yearStr.isEmpty() || priceStr.isEmpty() || stockStr.isEmpty() || vin.isEmpty()) {
        messageLabel.setText("All fields are required.");
        return;
    }

    if (vin.length() != 17) {
        messageLabel.setText("VIN must be exactly 17 digits.");
        return;
    }

    int year;
    double price;
    int stock;

    try {
        year = Integer.parseInt(yearStr);
        price = Double.parseDouble(priceStr);
        stock = Integer.parseInt(stockStr);
    } catch (NumberFormatException e) {
        messageLabel.setText("Year, Price, and Stock must be valid numbers.");
        return;
    }

    String sql = "INSERT INTO Cars (Make, Model, Year, Price, Stock, VIN) VALUES (?, ?, ?, ?, ?, ?)";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        pstmt.setString(1, make);
        pstmt.setString(2, model);
        pstmt.setInt(3, year);
        pstmt.setDouble(4, price);
        pstmt.setInt(5, stock);
        pstmt.setString(6, vin);

        pstmt.executeUpdate();

        // Success Message
        messageLabel.setStyle("-fx-text-fill: green; -fx-font-size: 12px;");
        messageLabel.setText("Car added successfully!");

        // Optionally clear fields
        clearFields();

        // Refresh scene
        carSection.reloadScene();
    } catch (SQLException e) {
        messageLabel.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
        messageLabel.setText("Error: VIN must be unique and exactly 17 digits.");
    }
}

private void clearFields() {
    txtMake.clear();
    txtModel.clear();
    txtYear.clear();
    txtPrice.clear();
    txtStock.clear();
    txtVIN.clear();
}


    public GridPane getForm() {
        return form;
    }

    public void showAddForm() {
        clearFields(); 
        messageLabel.setText("");
    }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\Car.java
```
package com.example;

public class Car {
   private int carID;
   private String make;
   private String model;
   private int year;
   private double price;
   private int stock;
   private String vin;

   // Constructor
   public Car(int carID, String make, String model, int year, double price, int stock, String vin) {
      this.carID = carID;
      this.make = make;
      this.model = model;
      this.year = year;
      this.price = price;
      this.stock = stock;
      this.vin = vin;
   }

   // Getters and setters
   public int getCarID() {
      return carID;
   }

   public void setCarID(int carID) {
      this.carID = carID;
   }

   public String getMake() {
      return make;
   }

   public void setMake(String make) {
      this.make = make;
   }

   public String getModel() {
      return model;
   }

   public void setModel(String model) {
      this.model = model;
   }

   public int getYear() {
      return year;
   }

   public void setYear(int year) {
      this.year = year;
   }

   public double getPrice() {
      return price;
   }

   public void setPrice(double price) {
      this.price = price;
   }

   public int getStock() {
      return stock;
   }

   public void setStock(int stock) {
      this.stock = stock;
   }

   public String getVin() {
      return vin;
   }

   public void setVin(String vin) {
      this.vin = vin;
   }
}

```
File: C:\Users\Kareem\Desktop\New folder (2)\demo\src\main\java\com\example\ButtonFactory.java
```
package com.example;

import javafx.scene.control.Button;
import org.kordamp.ikonli.javafx.FontIcon;

public class ButtonFactory {

    // Creates a styled button for the sidebar with an icon
    public static Button createSidebarButton(String text, String iconCode) {
        Button button = new Button(text);
        FontIcon icon = new FontIcon(iconCode);
        icon.setIconSize(18); // Set icon size as needed
        button.setGraphic(icon);
        button.getStyleClass().add("sidebar-button");
        return button;
    }

    // Creates a plain styled button, typically used for actions like Save, Cancel, etc.
    public static Button createActionButton(String text) {
        Button button = new Button(text);
        button.getStyleClass().add("action-button");
        return button;
    }

    // Optional: Create other specific button types as needed
    // Example: Button with specific handlers or tooltips

    public static Button createEditButton() {
        Button button = new Button();
        button.getStyleClass().add("edit-button"); // Assuming 'edit-button' is a CSS class defined
        FontIcon icon = new FontIcon("fas-edit");
        icon.setIconSize(16);
        button.setGraphic(icon);
        // Add any specific listeners here if needed
        return button;
    }
}

```
